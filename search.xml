<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础题目整理</title>
      <link href="/2019/08/02/Java%E5%9F%BA%E7%A1%80%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/"/>
      <url>/2019/08/02/Java%E5%9F%BA%E7%A1%80%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><p>面试题型大纲</p><p>面试题模块儿包含了十九个模块，分别为：java基础、容器、多线程、反射、对象拷贝、java Web模块、异常、网络、设计模式、spring/springMVC、spring Boot/spring Cloud、Hibernate、Mybatis、RabbitMQ、kafka、Zookeeper、Mysql、Redis、JVM</p><p>​</p><h1 id="Java基础题目整理"><a href="#Java基础题目整理" class="headerlink" title="Java基础题目整理"></a>Java基础题目整理</h1><h2 id="Jdk与jre有什么区别？"><a href="#Jdk与jre有什么区别？" class="headerlink" title="Jdk与jre有什么区别？"></a>Jdk与jre有什么区别？</h2><p>JRE是java运行时的环境，包含了java虚拟机、java基础类库，是使用java语言编写的程序运行时所需要的软件环境，是提供给想要运行java程序的用户使用的。</p><p>JDK是java开发工具包，是程序员使用java开发java程序所需要的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的javac，还包含了很多Java程序调试和分析的工具：jconsole、jvisualvm等工具软件，还包含了编写java程序所需的文档和案例程序。</p><h2 id="和eauals的区别是什么？"><a href="#和eauals的区别是什么？" class="headerlink" title="= = 和eauals的区别是什么？"></a>= = 和eauals的区别是什么？</h2><p>对于基本数据类型来说：== 比较的是两者的值是否相等</p><p>对于引用数据类型来说（对象）：</p><p>（1）“==”比较的是引用的地址是否相同（即是否是同一辆汽车（注意，只有一辆汽车））；Object中的.equals()方法和”==’功能一样</p><p>（2）但是String类中的.equals()方法重写了，比较的是两个引用对象的内容是否相同（即是否是完全相同的汽车（注意，有两辆汽车，且一模一样，完全相同））。</p><p>==用于比较数据是否相等，如果用它在比较对象的话，它只能比较对象在栈的内容是否相同。而eqals函数用来比较对象的内容是否相等（堆里的内容）。</p><p>（栈用来保存对象的引用，对象的的内容放在堆里面，由栈的引用指向他，java里的数组也是如此。）</p><h2 id="两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？"></a>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</h2><p>不对！两个对象equals相等，则他们的hashCode()必须相等，反之不一定。</p><p>​ 详解：</p><p>​ hashCode是继承自<strong>Object</strong>的方法，首先看hashCode方法的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native int hashCode();</span><br></pre></td></tr></table></figure><p>​ 可见hashCode方法是一个native方法【”A native method is a Java method whose implementation is provided by non-java code.”】，因为native方法是由非Java语言实现的，所以这个方法的定义中也没有具体的实现。根据jdk文档，该方法的实现一般是<strong>“通过将该对象的内部地址转换成一个整数来实现的”</strong>，这个返回值就作为该对象的哈希码值返回。</p><p>​ 由此可知<strong>默认情况下</strong>：</p><p>​ 两个对象==相等，则其hashcode一定相等，反之不一定成立。</p><p>​ 两个对象equals相等，则其hashcode一定相等，反之不一定成立。【和上一条等价，因为Object的equals实现用的就是 对象的==相等来判断】</p><p>​ 如果equals方法和hashCode方法<strong>被重写</strong>，则需满足<strong>hashCode 的常规协定</strong>：</p><p>​ 1.在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</p><p>​ 2.如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。</p><p>​ 3.如果根据 <a href="#equals(java.lang.Object">equals(java.lang.Object)</a>) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不要求一定生成不同的整数结果。但是，程序员应该意识到，<strong>为不相等的对象生成不同整数结果可以提高哈希表的性能</strong>。</p><p>​ 所以按规定<strong>重写的情况下</strong>：</p><p>​ 两个对象equals相等，则它们的hashcode必须相等，反之则不一定。</p><p>​ 两个对象==相等，则它们的hashcode必须相等，反之则不一定。【==相等，则equals必然相等】</p><p>​ 所以总的来说，只要按照规定，则有：</p><p>​ 两个对象equals相等，则它们的hashcode必须相等，反之则不一定。</p><p>Hash散列值有冲突的情况，虽然概率很低。</p><p><a href="https://www.cnblogs.com/jesonjason/p/5492208.html" target="_blank" rel="noopener">https://www.cnblogs.com/jesonjason/p/5492208.html</a></p><h2 id="final-在-java-中有什么作用？"><a href="#final-在-java-中有什么作用？" class="headerlink" title="final 在 java 中有什么作用？"></a>final 在 java 中有什么作用？</h2><p>final 修饰一个类时，这个类将不会被继承，同时该类的所有成员方法都会被隐式的指定为fianal方法</p><p>final修饰一个方法时，表示这个方法不会被重写（可以被重载成多个final方法）此处需要注意的一点是：因为重写的前提是子类可以从父类中继承此方法，如果父类中final修饰的方法同时访问控制权限为private，将会导致子类中不能直接继承到此方法，因此，此时可以在子类中定义相同的方法名和参数，此时不再产生重写与final的矛盾，而是在子类中重新定义了新的方法。（注：类的private方法会隐式地被指定为final方法。）</p><p>final修饰成员变量时，标识这个变量只能被赋值一次，且不会被修改，如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。本质上是一回事，因为引用的值是一个地址，final要求值，即地址的值不发生变化。</p><h2 id="java-中的-Math-round-1-5-等于多少？"><a href="#java-中的-Math-round-1-5-等于多少？" class="headerlink" title="java 中的 Math.round(-1.5) 等于多少？"></a>java 中的 Math.round(-1.5) 等于多少？</h2><p>-1</p><p>扩展JDK中的java.lang.Math类</p><p>round:返回四舍五入，负.5小数返回较大整数，如-1.5返回-1。</p><p>ceil:返回小数所在两整数间的较大值，如-1.5返回-1。</p><p>tail:返回小数所在两整数间的较小值，如-1.5返回-2。</p><p><a href="https://blog.csdn.net/meism5/article/details/89307441" target="_blank" rel="noopener">详解</a></p><h2 id="String-属于基础的数据类型吗？"><a href="#String-属于基础的数据类型吗？" class="headerlink" title="String 属于基础的数据类型吗？"></a>String 属于基础的数据类型吗？</h2><p>不属于！ String 是final修饰的java类，java的基本类型有8种：</p><p>​ 1：字符型： byte char</p><p>​ 2：基本类型：short，int,long</p><p>​ 3: 浮点类型：float,double</p><p>​ 4: 布尔类型： boolean</p><h2 id="java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="java 中操作字符串都有哪些类？它们之间有什么区别？"></a>java 中操作字符串都有哪些类？它们之间有什么区别？</h2><p>String、StringBuffer、StringBuilder</p><p>区别：String是不可变的对象，对每次对String类型的改变时都会生成一个新的对象，StringBuffer和StringBuilder是可以改变对象的。</p><p>对于操作效率：StringBuilder &gt; StringBuffer &gt; String</p><p>对于线程安全：StringBuffer 是线程安全，可用于多线程；StringBuilder 是非线程安全，用于单线程</p><p>不频繁的字符串操作使用 String。反之，StringBuffer 和 StringBuilder 都优于String</p><h2 id="String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="String str=”i”与 String str=new String(“i”)一样吗？"></a>String str=”i”与 String str=new String(“i”)一样吗？</h2><p>不一样！他们不是同一个对象。前者是一个常量，后者重新new了一个对象，内存空间不一样。</p><h2 id="如何将字符串反转？"><a href="#如何将字符串反转？" class="headerlink" title="如何将字符串反转？"></a>如何将字符串反转？</h2><p><a href="https://www.cnblogs.com/lanseyitai1224/p/6955609.html" target="_blank" rel="noopener">https://www.cnblogs.com/lanseyitai1224/p/6955609.html</a> 七八种方法 见附录</p><h2 id="String-类的常用方法都有那些？"><a href="#String-类的常用方法都有那些？" class="headerlink" title="String 类的常用方法都有那些？"></a>String 类的常用方法都有那些？</h2><p>eauals(),length(),concat(),charAt(),substring(),contains(),hashCode(),indexOf(),isEmpt() ……</p><h2 id="抽象类必须要有抽象方法吗？"><a href="#抽象类必须要有抽象方法吗？" class="headerlink" title="抽象类必须要有抽象方法吗？"></a>抽象类必须要有抽象方法吗？</h2><p>抽象类不一定有抽象方法，但是有抽象方法的类一定是抽象类</p><h2 id="普通类和抽象类有哪些区别？"><a href="#普通类和抽象类有哪些区别？" class="headerlink" title="普通类和抽象类有哪些区别？"></a>普通类和抽象类有哪些区别？</h2><p>1.抽象类不能被实例化。</p><p>2.抽象类可以有构造函数，被继承时子类必须继承父类的一个构造方法，抽象方法不能被声明成静态方法。抽象类的构造函数用来初始化抽象类的一些字段，而这一切都在抽象类的派生类实例化之前发生。不仅如此，抽线类的构造函数还有一种巧妙应用：就是在其内部实现子类必须执行的代码。</p><p>3.抽象方法允许声明，而无需实现，抽象类可以允许普通方法有主体。</p><p>4.有抽象方法的类一定为抽象类，抽象类不一定只含有抽象方法。</p><p>5.抽象类的子类必须实现抽象类中的所有抽象方法，否则这个类也是抽象类。</p><h2 id="抽象类能使用-final-修饰吗？"><a href="#抽象类能使用-final-修饰吗？" class="headerlink" title="抽象类能使用 final 修饰吗？"></a>抽象类能使用 final 修饰吗？</h2><p>不可以，final关键字不可以用来修饰抽象类和接口</p><h2 id="接口和抽象类有什么区别？"><a href="#接口和抽象类有什么区别？" class="headerlink" title="接口和抽象类有什么区别？"></a>接口和抽象类有什么区别？</h2><p>1.接口和抽象类都不能被实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。</p><p>2.抽象类要被子类继承extends，接口要被类实现</p><p>3.接口只能做方法申明，抽象类可以做方法申明，也可以做方法实现</p><p>4.接口里定义的变量只能是公共的静态常量，抽象类定义的变量是普通变量 ..</p><p>5.抽象类里面的抽象方法必须被子类全部实现，如果子类不能实现父类全部抽象方法，则这个子类也是抽象类；一个类实现接口的时候，如果不能全部实现接口方法，则这个类也是抽象类</p><p>6.抽象方法只能声明，不能实现。抽象类是重构的结果，接口是设计的结果。</p><p>7.抽象类里面可以没有抽象方法</p><p>8.如果一个类里面有抽象方法，那么这个类是抽象类</p><p>9.抽象方法要被实现，所以不能是私有的，也不能是静态的</p><p>10.接口可以继承接口，并且可以多继承，而抽象类只能单根继承</p><h2 id="java-中-IO-流分为几种？"><a href="#java-中-IO-流分为几种？" class="headerlink" title="java 中 IO 流分为几种？"></a>java 中 IO 流分为几种？</h2><p><a href="https://www.cnblogs.com/QQ846300233/p/6046388.html" target="_blank" rel="noopener">https://www.cnblogs.com/QQ846300233/p/6046388.html</a></p><h2 id="BIO、NIO、AIO-有什么区别？"><a href="#BIO、NIO、AIO-有什么区别？" class="headerlink" title="BIO、NIO、AIO 有什么区别？"></a>BIO、NIO、AIO 有什么区别？</h2><p><a href="https://blog.csdn.net/u010310183/article/details/81700405" target="_blank" rel="noopener">https://blog.csdn.net/u010310183/article/details/81700405</a></p><h2 id="Files的常用方法都有哪些？"><a href="#Files的常用方法都有哪些？" class="headerlink" title="Files的常用方法都有哪些？"></a>Files的常用方法都有哪些？</h2><p><a href="https://www.cnblogs.com/cocoxu1992/p/10460994.html" target="_blank" rel="noopener">https://www.cnblogs.com/cocoxu1992/p/10460994.html</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？-1"><a href="#两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？-1" class="headerlink" title="两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？"></a>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</h2><p>equals()：反映的是对象或变量具体的值，即两个对象里面包含的值–可能是对象的引用，也可能是值类型的值。</p><p>hashCode()：计算出对象实例的哈希码，并返回哈希码，又称为散列函数。根类Object的hashCode()方法的计算依赖于对象实例的D（内存地址），故每个Object对象的hashCode都是唯一的；当然，当对象所对应的类重写了hashCode()方法时，结果就截然不同了。</p><p>之所以有hashCode方法，是因为在批量的对象比较中，hashCode要比equals来得快，很多集合都用到了hashCode，比如HashTable。<br>两个obj，如果equals()相等，hashCode()一定相等。<br>两个obj，如果hashCode()相等，equals()不一定相等（Hash散列值有冲突的情况，虽然概率很低）。<br>所以：<br>可以考虑在集合中，判断两个对象是否相等的规则是：<br>第一步，如果hashCode()相等，则查看第二步，否则不相等;<br>第二步，查看equals()是否相等，如果相等，则两obj相等，否则还是不相等。</p><p>1、首先equals()和hashcode()这两个方法都是从object类中继承过来的。<br>equals()是对两个对象的地址值进行的比较（即比较引用是否相同）。<br>hashCode()是一个本地方法，它的实现是根据本地机器相关的。<br>2、Java语言对equals()的要求如下，这些要求是必须遵循的：<br><strong>A</strong> <strong>对称性</strong>：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。<br><strong>B</strong> <strong>反射性</strong>：x.equals(x)必须返回是“true”。<br><strong>C</strong> <strong>类推性</strong>：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。<br><strong>D</strong> <strong>一致性</strong>：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。<br>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。<br>3、equals()相等的两个对象，hashcode()一定相等；<br>反过来：hashcode()不等，一定能推出equals()也不等；<br>hashcode()相等，equals()可能相等，也可能不等。</p><p><strong>为什么选择hashcode方法？</strong></p><p><strong>———————————————-</strong></p><p>以java.lang.Object来理解,JVM每new一个Object,它都会将这个Object丢到一个Hash哈希表中去,这样的话,下次做Object的比较或者取这个对象的时候,它会根据对象的hashcode再从Hash表中取这个对象。这样做的目的是提高取对象的效率。具体过程是这样:</p><p>\1. new Object(),JVM根据这个对象的Hashcode值,放入到对应的Hash表对应的Key上,如果不同的对象确产生了相同的hash值,也就是发生了Hash key相同导致冲突的情况,那么就在这个Hash key的地方产生一个链表,将所有产生相同hashcode的对象放到这个单链表上去,串在一起。</p><p>\2. 比较两个对象的时候,首先根据他们的hashcode去hash表中找他的对象,当两个对象的hashcode相同,那么就是说他们这两个对象放在Hash表中的同一个key上,那么他们一定在这个key上的链表上。那么此时就只能根据Object的equal方法来比较这个对象是否equal。当两个对象的hashcode不同的话，肯定他们不能equal.</p><p>可能经过上面理论的讲一下大家都迷糊了，我也看了之后也是似懂非懂的。下面我举个例子详细说明下。</p><p>list是可以重复的，set是不可以重复的。那么set存储数据的时候是怎样判断存进的数据是否已经存在。使用equals()方法呢，还是hashcode()方法。</p><p>假如用equals()，那么存储一个元素就要跟已存在的所有元素比较一遍，比如已存入100个元素，那么存101个元素的时候，就要调用equals方法100次。</p><p>但如果用hashcode()方法的话，他就利用了hash算法来存储数据的。</p><p>这样的话每存一个数据就调用一次hashcode()方法，得到一个hashcode值及存入的位置。如果该位置不存在数据那么就直接存入，否则调用一次equals()方法，不相同则存，相同不存。这样下来整个存储下来不需要调用几次equals方法，虽然多了几次hashcode方法，但相对于前面来讲效率高了不少。</p><p><strong>为什么要重写equals方法？</strong></p><p><strong>——————————————-</strong></p><p>因为Object的equal方法默认是两个对象的引用的比较，意思就是指向同一内存,地址则相等，否则不相等；如果你现在需要利用对象里面的值来判断是否相等，则重载equal方法。</p><p>说道这个地方我相信很多人会有疑问，相信大家都被String对象的equals()方法和”==”纠结过一段时间，当时我们知道String对象中equals方法是判断值的，而==是地址判断。</p><p>那照这么说equals怎么会是地址的比较呢？</p><p>那是因为实际上JDK中，String、Math等封装类都对Object中的equals()方法进行了重写。</p><p>我们先看看Object中equals方法的源码：</p><p>我们都知道所有的对象都拥有标识(内存地址)和状态(数据)，同时“==”比较两个对象的的内存地址，所以说使用Object的equals()方法是比较两个对象的内存地址是否相等，即若object1.equals(object2)为true，则表示equals1和equals2实际上是引用同一个对象。虽然有时候Object的equals()方法可以满足我们一些基本的要求，但是我们必须要清楚我们很大部分时间都是进行两个对象的比较，这个时候Object的equals()方法就不可以了，所以才会有String这些类对equals方法的改写，依次类推Double、Integer、Math。。。。等等这些类都是重写了equals()方法的，从而进行的是内容的比较。希望大家不要搞混了。</p><p><strong>改写equals时总是要改写hashcode</strong></p><p><strong>——————————————-</strong></p><p>java.lnag.Object中对hashCode的约定：</p><ol><li>在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，则对该对象调用hashCode方法多次，它必须始终如一地返回同一个整数。</li><li>如果两个对象根据equals(Object o)方法是相等的，则调用这两个对象中任一对象的hashCode方法必须产生相同的整数结果。</li><li>如果两个对象根据equals(Object o)方法是不相等的，则调用这两个对象中任一个对象的hashCode方法，不要求产生不同的整数结果。但如果能不同，则可能提高散列表的性能。</li></ol><p>根据上一个问题，实际上我们已经能很简单的解释这一点了，比如改写String中的equals为基于内容上的比较而不是内存地址的话，那么虽然equals相等，但并不代表内存地址相等，由hashcode方法的定义可知内存地址不同，没改写的hashcode值也可能不同。所以违背了第二条约定。</p><p>又如new一个对象，再new一个内容相等的对象，调用equals方法返回的true，但他们的hashcode值不同，将两个对象存入HashSet中，会使得其中包含两个相等的对象，因为是先检索hashcode值，不等的情况下才会去比较equals方法的。</p><p><strong>hashCode方法使用介绍</strong></p><p><strong>————————————————</strong></p><p>Hash表数据结构常识：<br>一、哈希表基于数组。<br>二、缺点：基于数组的，数组创建后难以扩展。某些哈希表被基本填满时，性能下降得非常严重。<br>三、没有一种简便得方法可以以任何一种顺序遍历表中数据项。<br>四、如果不需要有序遍历数据，并且可以提前预测数据量的大小，那么哈希表在速度和易用性方面是无与伦比的。</p><p>一、为什么HashCode对于对象是如此的重要：<br>一个对象的HashCode就是一个简单的Hash算法的实现，虽然它和那些真正的复杂的Hash算法相比还不能叫真正的算法，它如何实现它，不仅仅是程序员的编程水平问题，<br>而是关系到你的对象在存取是性能的非常重要的关系.有可能，不同的HashCode可能会使你的对象存取产生，成百上千倍的性能差别.<br>先来看一下，在JAVA中两个重要的数据结构:HashMap和Hashtable，虽然它们有很大的区别，如继承关系不同，对value的约束条件(是否允许null)不同，以及线程安全性等有着特定的区别，但从实现原理上来说，它们是一致的.所以，我们只以Hashtable来说明：<br>在java中，存取数据的性能，一般来说当然是首推数组，但是在数据量稍大的容器选择中，Hashtable将有比数组性能更高的查询速度.具体原因看下面的内容.<br>Hashtable在存储数据时，一般先将该对象的HashCode和0x7FFFFFFF做与操作，因为一个对象的HashCode可以为负数，这样操作后可以保证它为一个正整数.然后以Hashtable的长度取模，得到该对象在Hashtable中的索引.<br>index = (o.hashCode() &amp; 0x7FFFFFFF)%hs.length;<br>这个对象就会直接放在Hashtable的每index位置，对于写入，这和数组一样，把一个对象放在其中的第index位置，但如果是查询，经过同样的算法，Hashtable可以直接从第index取得这个对象，而数组却要做循环比较.所以对于数据量稍大时，Hashtable的查询比数组具有更高的性能.<br>既然一个对象可以根据HashCode直接定位它在Hashtable中的位置，那么为什么Hashtable还要用key来做映射呢?这就是关系Hashtable性能问题的最重要的问题：Hash冲突.<br>常见的Hash冲突是不同对象最终产生了相同的索引，而一种非常甚至绝对少见的Hash冲突是，如果一组对象的个数大过了int范围，而HashCode的长度只能在int范围中，所以肯定要有同一组的元素有相同的HashCode，这样无论如何他们都会有相同的索引.当然这种极端的情况是极少见的，可以暂不考虑，但是对于同的HashCode经过取模，则会产中相同的索引，或者不同的对象却具有相同的HashCode，当然具有相同的索引.<br>所以对于索引相同的对象，在该index位置存放了多个值，这些值要想能正确区分，就要依靠key来识别.<br>事实上一个设计各好的HashTable，一般来说会比较平均地分布每个元素，因为Hashtable的长度总是比实际元素的个数按一定比例进行自增(装填因子一般为0.75)左右，这样大多数的索引位置只有一个对象，而很少的位置会有几个元素.所以Hashtable中的每个位置存放的是一个链表，对于只有一个对象是位置，链表只有一个首节点(Entry)，Entry的next为null.然后有hashCode，key，value属性保存了该位置的对象的HashCode，key和value(对象本身)，如果有相同索引的对象进来则会进入链表的下一个节点.如果同一个索引中有多个对象，根据HashCode和key可以在该链表中找到一个和查询的key相匹配的对象.<br>从上面我看可以看到，对于HashMap和Hashtable的存取性能有重大影响的首先是应该使该数据结构中的元素尽量大可能具有不同的HashCode，虽然这并不能保证不同的HashCode产生不同的index，但相同的HashCode一定产生相同的index，从而影响产生Hash冲突.<br>对于一个象，如果具有很多属性，把所有属性都参与散列，显然是一种笨拙的设计.因为对象的HashCode()方法几乎无所不在地被自动调用，如equals比较，如果太多的对象参与了散列.<br>那么需要的操作常数时间将会增加很大.所以，挑选哪些属性参与散列绝对是一个编程水平的问题.<br>从实现来说，一般的HashCode方法会这样:<br>return Attribute1.HashCode() Attribute1.HashCode()..[ super.HashCode()]，我们知道，每次调用这个方法，都要重新对方法内的参与散列的对象重新计算一次它们的HashCode的运算，如果一个对象的属性没有改变，仍然要每次都进行计算，所以如果设置一个标记来缓存当前的散列码，只要当参与散列的对象改变时才重新计算，否则调用缓存的hashCode，这可以从很大程度上提高性能.<br>默认的实现是将对象内部地址转化为整数作为HashCode，这当然能保证每个对象具有不同的HasCode，因为不同的对象内部地址肯定不同(废话)，但java语言并不能让程序员获取对象内部地址，所以，让每个对象产生不同的HashCode有着很多可研究的技术.<br>如果从多个属性中采样出能具有平均分布的hashCode的属性，这是一个性能和多样性相矛盾的地方，如果所有属性都参与散列，当然hashCode的多样性将大大提高，但牺牲了性能，而如果只能少量的属性采样散列，极端情况会产生大量的散列冲突，如对”人”的属性中，如果用性别而不是姓名或出生日期，那将只有两个或几个可选的hashcode值，将产生一半以上的散列冲突.所以如果可能的条件下，专门产生一个序列用来生成HashCode将是一个好的选择(当然产生序列的性能要比所有属性参与散列的性能高的情况下才行，否则还不如直接用所有属性散列).<br>如何对HashCode的性能和多样性求得一个平衡，可以参考相关算法设计的书，其实并不一定要求非常的优秀，只要能尽最大可能减少散列值的聚集.重要的是我们应该记得HashCode对于我们的程序性能有着重要的影响，在程序设计时应该时时加以注意.<br>请记住：如果你想有效的使用HashMap，你就必须重写在其的HashCode()。<br>还有两条重写HashCode()的原则：<br>不必对每个不同的对象都产生一个唯一的hashcode，只要你的HashCode方法使get()能够得到put()放进去的内容就可以了。即“不为一原则”。生成hashcode的算法尽量使hashcode的值分散一些， 不要很多hashcode都集中在一个范围内，这样有利于提高HashMap的性能。即“分散原则”。<br>掌握了这两条原则，你就能够用好HashMap编写自己的程序了。不知道大家注意没有， java.lang.Object中提供的三个方法：clone()，equals()和hashCode()虽然很典型，但在很多情况下都不能够适用，它们只是简单的由对象的地址得出结果。这就需要我们在自己的程序中重写它们，其实java类库中也重写了千千万万个这样的方法。利用面向对象的多态性——覆盖，Java的设计者很优雅的构建了Java的结构，也更加体现了Java是一门纯OOP语言的特性。<br>Java提供的Collection和Map的功能是十分强大的，它们能够使你的程序实现方式更为灵活，执行效率更高。</p><h2 id="如何将字符串反转？-1"><a href="#如何将字符串反转？-1" class="headerlink" title="如何将字符串反转？"></a>如何将字符串反转？</h2><p>Java中经常会用到将字符串进行反转的时候，程序员孔乙己总结了7种反转方法，如下：</p><h3 id="方法1-递归方法"><a href="#方法1-递归方法" class="headerlink" title="//方法1 递归方法"></a>//方法1 递归方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse1(String s) &#123;</span><br><span class="line"> int length = s.length();</span><br><span class="line"> if (length &lt;= 1)&#123;</span><br><span class="line">    return s;</span><br><span class="line">   &#125;</span><br><span class="line"> String left = s.substring(0, length / 2);</span><br><span class="line"> String right = s.substring(length / 2, length);</span><br><span class="line"> return reverse1(right) + reverse1(left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2-通过-charAt-int-index-返回char值进行字符串拼接"><a href="#方法2-通过-charAt-int-index-返回char值进行字符串拼接" class="headerlink" title="//方法2 通过 charAt(int index)返回char值进行字符串拼接"></a>//方法2 通过 charAt(int index)返回char值进行字符串拼接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse2(String s) &#123;</span><br><span class="line"> int length = s.length();</span><br><span class="line"> String reverse = &quot;&quot;;</span><br><span class="line"> for (int i = 0; i &lt; length; i++)</span><br><span class="line">  reverse = s.charAt(i) + reverse;</span><br><span class="line"> return reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法3-把字符串转换成字符数组倒叙拼接然后返回值"><a href="#方法3-把字符串转换成字符数组倒叙拼接然后返回值" class="headerlink" title="//方法3 把字符串转换成字符数组倒叙拼接然后返回值"></a>//方法3 把字符串转换成字符数组倒叙拼接然后返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse3(String s) &#123;</span><br><span class="line"> char[] array = s.toCharArray();</span><br><span class="line"> String reverse = &quot;&quot;;</span><br><span class="line"> for (int i = array.length - 1; i &gt;= 0; i--)</span><br><span class="line">  reverse += array[i];</span><br><span class="line"> return reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法4-调用StringBuffer中的reverse方法"><a href="#方法4-调用StringBuffer中的reverse方法" class="headerlink" title="//方法4 调用StringBuffer中的reverse方法"></a>//方法4 调用StringBuffer中的reverse方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse4(String s) &#123;</span><br><span class="line">  return new StringBuffer(s).reverse().toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="方法5-把字符串转换成字符数组首位对调位置"><a href="#方法5-把字符串转换成字符数组首位对调位置" class="headerlink" title="//方法5 把字符串转换成字符数组首位对调位置"></a>//方法5 把字符串转换成字符数组首位对调位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse5(String orig) &#123;</span><br><span class="line"> char[] s = orig.toCharArray();</span><br><span class="line"> int n = s.length - 1;</span><br><span class="line"> int halfLength = n / 2;</span><br><span class="line"> for (int i = 0; i &lt;= halfLength; i++) &#123;</span><br><span class="line">  char temp = s[i];</span><br><span class="line">  s[i] = s[n - i];</span><br><span class="line">  s[n - i] = temp;</span><br><span class="line"> &#125;</span><br><span class="line"> return new String(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法6"><a href="#方法6" class="headerlink" title="//方法6"></a>//方法6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse6(String s) &#123;</span><br><span class="line">  char[] str = s.toCharArray(); </span><br><span class="line">  int begin = 0;</span><br><span class="line">  int end = s.length() - 1;  </span><br><span class="line">  while (begin &lt; end) &#123;</span><br><span class="line">   str[begin] = (char) (str[begin] ^ str[end]);</span><br><span class="line">   str[end] = (char) (str[begin] ^ str[end]);</span><br><span class="line">   str[begin] = (char) (str[end] ^ str[begin]);</span><br><span class="line">   begin++;</span><br><span class="line">   end--;</span><br><span class="line">  &#125;</span><br><span class="line"> return new String(str);</span><br><span class="line">&#125;[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);</span><br></pre></td></tr></table></figure><h3 id="方法7"><a href="#方法7" class="headerlink" title="//方法7"></a>//方法7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Stack;</span><br><span class="line">public class StringReverse &#123;    </span><br><span class="line"> public static String reverse7(String s) &#123;</span><br><span class="line">  char[] str = s.toCharArray();</span><br><span class="line">  Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();</span><br><span class="line">  for (int i = 0; i &lt; str.length; i++)</span><br><span class="line">   stack.push(str[i]);</span><br><span class="line">  </span><br><span class="line">  String reversed = &quot;&quot;;</span><br><span class="line">  for (int i = 0; i &lt; str.length; i++)</span><br><span class="line">   reversed += stack.pop();</span><br><span class="line">  return reversed;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP学习笔记</title>
      <link href="/2019/08/02/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/02/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><p>HTTP<strong>协议</strong></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/2019/08/02/HTTP学习笔记/概念1.png" alt="img"></p><p><img src="/2019/08/02/HTTP学习笔记/概念2.png" alt="img"></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>网络分层分为四层：应用层（HTTP、ICMP、FILE）、传输层(TCP、UDP)、网络层(IP)、链路层(网络硬件、操作系统)</p><p><img src="/2019/08/02/HTTP学习笔记/理解1.png" alt="img"></p><p>Ip 网络层添加mac地址（不可变 网卡地址）</p><p><img src="/2019/08/02/HTTP学习笔记/理解2.png" alt="img"></p><p>每经过一层添加相应首部数据（上图对应四个分层）上部四步实在客户端进行</p><p><img src="/2019/08/02/HTTP学习笔记/理解3.png" alt="img"></p><p>此时传递到服务器。</p><h3 id="三次握手，四次挥手："><a href="#三次握手，四次挥手：" class="headerlink" title="三次握手，四次挥手："></a>三次握手，四次挥手：</h3><h4 id="三次握手："><a href="#三次握手：" class="headerlink" title="三次握手："></a>三次握手：</h4><p><img src="/2019/08/02/HTTP学习笔记/三次握手.png" alt="img"></p><p>数据传输指上图客户端到服务器的数据传输过程</p><p>举例说明：</p><p><img src="/2019/08/02/HTTP学习笔记/三次握手2.png" alt="img"></p><h4 id="四次挥手："><a href="#四次挥手：" class="headerlink" title="四次挥手："></a>四次挥手：</h4><p><img src="/2019/08/02/HTTP学习笔记/四次挥手.png" alt></p><h3 id="总体的交互过程"><a href="#总体的交互过程" class="headerlink" title="总体的交互过程:"></a>总体的交互过程:</h3><h4 id="持久化链接"><a href="#持久化链接" class="headerlink" title="持久化链接"></a>持久化链接</h4><p><img src="/2019/08/02/HTTP学习笔记/持久化链接.png" alt></p><h4 id="管线化："><a href="#管线化：" class="headerlink" title="管线化："></a>管线化：</h4><p><img src="/2019/08/02/HTTP学习笔记/管线化.png" alt="img"></p><p>多次请求 无响应。</p><h4 id="早期请求与响应过程："><a href="#早期请求与响应过程：" class="headerlink" title="早期请求与响应过程："></a>早期请求与响应过程：</h4><p><img src="/2019/08/02/HTTP学习笔记/早期的请求与响应过程.png" alt="img"></p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="1、-HTTP为什么是不安全的？"><a href="#1、-HTTP为什么是不安全的？" class="headerlink" title="1、 HTTP为什么是不安全的？"></a>1、 HTTP为什么是不安全的？</h3><p>问题不能这么问。 首先，HTTP协议本身不存在安全问题，且协议本身也几乎不会成为被攻击对象。所谓“HTTP不安全”指的是应用HTTP协议的服务器和客户端，以及运行在服务器上的web应用资源容易受到攻击，这些是不安全的。</p><p>因为HTTP协议非常单纯，不具备会话管理，不具备加密处理。如果有需要，开发者需要自己设计（认证、会话管理），这种情况由于自行设计会出现多样性，这些多样性的设计就可能存在了安全问题</p><p>使用的软件（WEB软件）存在漏洞</p><h3 id="2、-常见的WEB攻击"><a href="#2、-常见的WEB攻击" class="headerlink" title="2、 常见的WEB攻击"></a>2、 常见的WEB攻击</h3><p><img src="/2019/08/02/HTTP学习笔记/常见的WEB攻击.png" alt="img"></p><h2 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h2><p>HTTPS = HTTP+SSL</p><p>https是http的一个安全通道，其安全保证是由ssl提供</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Nte </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2019/07/14/%E6%97%A5%E8%AE%B0/"/>
      <url>/2019/07/14/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><h1 id="在此记录下我的学习过程与生活上的有趣的事情。。。"><a href="#在此记录下我的学习过程与生活上的有趣的事情。。。" class="headerlink" title="在此记录下我的学习过程与生活上的有趣的事情。。。"></a>在此记录下我的学习过程与生活上的有趣的事情。。。</h1><p>暑期的都一个星期。。。不想学习不想学习不想学习！！！ 但是在家里除了玩手机实在是无聊啊！还是乖乖开始学习吧。首先，在这里制定一个学习计划！Action！</p><p>先偷张图表达一下心情。</p><p><img src="/2019/07/14/日记/bolotou.jpg" alt></p><p>在经历了一周的“舒服”之后，决定开始学习，明天是个不错的日子，周一！！开始菜鸟晋升之路。从算法开始吧。大佬们已经开始写算法了，然而菜鸟还在学大佬n年前的思路。每日<strong><em><u>牛客网</u></em></strong>☻</p><p><img src="/2019/07/14/日记/砖头.jpg" alt></p><p>搬砖开始加油！C/C++是下一个目标，不要求精通但求熟练使用。还有加强办公软件的使用。学习计算机网络与jvm、ssm框架原理，mysql。<img src="/2019/07/14/日记/renzongdaoyuan.jpg" alt></p><p>最后，加油吧！</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> DailyLife </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyDailyLife </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java发送邮件</title>
      <link href="/2019/06/17/java%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/06/17/java%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><p>java 发送电子邮件（QQ邮箱为例）</p><p>使用java mail发送邮件</p><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * java 发送邮件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JavaMail 版本: 1.6.0</span></span><br><span class="line"><span class="comment"> * JDK 版本: JDK 1.7 以上（必须）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）</span></span><br><span class="line">    <span class="comment">// PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）,</span></span><br><span class="line">    <span class="comment">//     对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String myEmailAccount = <span class="string">"xxxxx@qq.com"</span>;</span><br><span class="line">    <span class="comment">// 授权码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String myEmailPassword = <span class="string">"xxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com</span></span><br><span class="line">    <span class="comment">// 网易163邮箱的 SMTP 服务器地址为: smtp.163.com</span></span><br><span class="line">    <span class="comment">// QQ邮箱的 SMTP 服务器地址为:smtp.qq.com</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String myEmailSMTPHost = <span class="string">"smtp.qq.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收件人邮箱（替换为自己知道的有效邮箱）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String receiveMailAccount = <span class="string">"xxxx@qq.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建参数配置, 用于连接邮件服务器的参数配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();                    <span class="comment">// 参数配置</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);   <span class="comment">// 使用的协议（JavaMail规范要求）</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, myEmailSMTPHost);   <span class="comment">// 发件人的邮箱的 SMTP 服务器地址</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);            <span class="comment">// 需要请求认证</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),</span></span><br><span class="line">        <span class="comment">//     如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,</span></span><br><span class="line">        <span class="comment">//     打开下面 /* ... */ 之间的注释代码, 开启 SSL 安全连接。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,</span></span><br><span class="line"><span class="comment">        //                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,</span></span><br><span class="line"><span class="comment">        //                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)</span></span><br><span class="line"><span class="comment">        final String smtpPort = "465";</span></span><br><span class="line"><span class="comment">        props.setProperty("mail.smtp.port", smtpPort);</span></span><br><span class="line"><span class="comment">        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");</span></span><br><span class="line"><span class="comment">        props.setProperty("mail.smtp.socketFactory.fallback", "false");</span></span><br><span class="line"><span class="comment">        props.setProperty("mail.smtp.socketFactory.port", smtpPort);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 根据配置创建会话对象, 用于和邮件服务器交互</span></span><br><span class="line">        Session session = Session.getInstance(props);</span><br><span class="line">        session.setDebug(<span class="keyword">true</span>);                                 <span class="comment">// 设置为debug模式, 可以查看详细的发送 log</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建一封邮件</span></span><br><span class="line">        MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 根据 Session 获取邮件传输对象</span></span><br><span class="line">        Transport transport = session.getTransport();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,</span></span><br><span class="line">        <span class="comment">//           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误</span></span><br><span class="line">        <span class="comment">//           类型到对应邮件服务器的帮助网站上查看具体失败原因。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:</span></span><br><span class="line">        <span class="comment">//           (1) 邮箱没有开启 SMTP 服务;</span></span><br><span class="line">        <span class="comment">//           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;</span></span><br><span class="line">        <span class="comment">//           (3) 邮箱服务器要求必须要使用 SSL 安全连接;</span></span><br><span class="line">        <span class="comment">//           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;</span></span><br><span class="line">        <span class="comment">//           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//    PS_03: 仔细看log, 认真看log, 看懂log, 错误原因都在log已说明。</span></span><br><span class="line">        transport.connect(myEmailAccount, myEmailPassword);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class="line">        transport.sendMessage(message, message.getAllRecipients());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 关闭连接</span></span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一封只包含文本的简单邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 和服务器交互的会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendMail 发件人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiveMail 收件人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MimeMessage <span class="title">createMimeMessage</span><span class="params">(Session session, String sendMail, String receiveMail)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一封邮件</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> InternetAddress(sendMail, <span class="string">"aaaaa"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. To: 收件人（可以增加多个收件人、抄送、密送）</span></span><br><span class="line">        message.setRecipient(MimeMessage.RecipientType.TO, <span class="keyword">new</span> InternetAddress(receiveMail, <span class="string">"examkuuserreceive"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）</span></span><br><span class="line">        message.setSubject(<span class="string">"aaaaa"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）</span></span><br><span class="line">        Utils myUtils = <span class="keyword">new</span> Utils();</span><br><span class="line">        message.setContent(<span class="string">"aaaaaaaaaaaaa"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 设置发件时间</span></span><br><span class="line">        message.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 保存设置</span></span><br><span class="line">        message.saveChanges();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 11g 配置允许远程连接</title>
      <link href="/2019/05/31/Oracle%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/05/31/Oracle%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><p><strong>Windows10 Oracle 11g设置允许远程连接（局域网）</strong></p><h1 id="打开Net-Manager"><a href="#打开Net-Manager" class="headerlink" title="打开Net Manager"></a>打开Net Manager</h1><p>（如果找不到这个应用，可以使用搜索功能在本地电脑上进行搜索）</p><p><img src="/2019/05/31/Oracle配置允许远程连接/netManager.png" alt></p><h1 id="点击Oracle-net配置—-》本地—-》监听程序—-》LISTENER-点击下方添加地址，输入ip地址和端口号。"><a href="#点击Oracle-net配置—-》本地—-》监听程序—-》LISTENER-点击下方添加地址，输入ip地址和端口号。" class="headerlink" title="点击Oracle net配置—-》本地—-》监听程序—-》LISTENER,点击下方添加地址，输入ip地址和端口号。"></a>点击Oracle net配置—-》本地—-》监听程序—-》LISTENER,点击下方添加地址，输入ip地址和端口号。</h1><p>（Oracel默认端口号为1521，可根据需要自定义端口号，本例以1522端口为例子）</p><p><img src="/2019/05/31/Oracle配置允许远程连接/netPeizhi.png" alt></p><h1 id="点击文件—-》保存网络配置，退出"><a href="#点击文件—-》保存网络配置，退出" class="headerlink" title="点击文件—-》保存网络配置，退出"></a>点击文件—-》保存网络配置，退出</h1><p><img src="/2019/05/31/Oracle配置允许远程连接/保存-1559263746103.png" alt></p><h1 id="开放1522端口，打开windows防火墙设置—-》高级设置—-》入站规则"><a href="#开放1522端口，打开windows防火墙设置—-》高级设置—-》入站规则" class="headerlink" title="开放1522端口，打开windows防火墙设置—-》高级设置—-》入站规则"></a>开放1522端口，打开windows防火墙设置—-》高级设置—-》入站规则<img src="/2019/05/31/Oracle配置允许远程连接/入站规则.png" alt></h1><h1 id="新建入站规则—-》端口，下一步—-》输入1522（自定义的端口），下一步—-》输入该入站规则的名称和描述，点击完成。"><a href="#新建入站规则—-》端口，下一步—-》输入1522（自定义的端口），下一步—-》输入该入站规则的名称和描述，点击完成。" class="headerlink" title="新建入站规则—-》端口，下一步—-》输入1522（自定义的端口），下一步—-》输入该入站规则的名称和描述，点击完成。"></a>新建入站规则—-》端口，下一步—-》输入1522（自定义的端口），下一步—-》输入该入站规则的名称和描述，点击完成。</h1><p><img src="/2019/05/31/Oracle配置允许远程连接/新建入站规则.png" alt></p><p><img src="/2019/05/31/Oracle配置允许远程连接/选择端口.png" alt></p><p><img src="/2019/05/31/Oracle配置允许远程连接/选定1522.png" alt></p><p><img src="/2019/05/31/Oracle配置允许远程连接/输入名称.png" alt></p><h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><p>Oracle 服务要开启，至少开启OracleOraDb11g_home1TNSListener、OracleServiceORCL</p><p><img src="/2019/05/31/Oracle配置允许远程连接/Oracle服务.png" alt></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle sql语句学习笔记</title>
      <link href="/2019/05/23/Oracle-sql%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/23/Oracle-sql%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><h1 id="Oracle-sql语句学习笔记"><a href="#Oracle-sql语句学习笔记" class="headerlink" title="Oracle  sql语句学习笔记"></a>Oracle sql语句学习笔记</h1><p>本笔记记录本人学习过程中常用到的知识</p><h1 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h1><p>oracle的分页查询有多重书写方式（深入学习oracle语句请参考官方文档），不同的书写方式效率也不同,下面是一种效率较高的写法。/<em> 这个表示注释</em>/</p><p>这个方法嵌套一层，速度快，当数据量大时，速度也很快。这种方法，在里层嵌套控制的查询的最大值，在最外层控制的最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM </span><br><span class="line">    (</span><br><span class="line">        SELECT </span><br><span class="line">            ROWNUM AS rowno, t.*</span><br><span class="line">        FROM </span><br><span class="line">            SqlLearn /*(待查询的数据表）*/ t</span><br><span class="line">        WHERE </span><br><span class="line">            Edition BETWEEN &apos;2018&apos;  AND &apos;2022&apos;</span><br><span class="line">        AND </span><br><span class="line">            ROWNUM &lt;= 15 /*（要查询的分页  本例从10到15）*/</span><br><span class="line">    ) SqlLearn_page</span><br><span class="line"> WHERE </span><br><span class="line">    SqlLearn_page.rowno &gt;= 10;</span><br></pre></td></tr></table></figure><p>也可以这样写：这时候在最外层控制最大值和最小值 ，相对来说第一种方法效率较高一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line"></span><br><span class="line">  FROM (SELECT a.*, ROWNUM rn</span><br><span class="line"></span><br><span class="line">          FROM (SELECT *</span><br><span class="line"></span><br><span class="line">                  FROM SqlLearn  WHERE </span><br><span class="line">            Edition BETWEEN &apos;2018&apos;  AND &apos;2022&apos;) a)</span><br><span class="line"></span><br><span class="line"> WHERE rn BETWEEN 10 AND 15</span><br></pre></td></tr></table></figure><h1 id="2-日期处理"><a href="#2-日期处理" class="headerlink" title="2.日期处理"></a>2.日期处理</h1><p>TO_DATE格式(以时间:2019-05-23 17:45:25为例)</p><p>1.日期和字符转换函数用法（to_date,to_char）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) as nowTime from dual;   //日期转化为字符串  </span><br><span class="line">select to_char(sysdate,&apos;yyyy&apos;)  as nowYear   from dual;   //获取时间的年  </span><br><span class="line">select to_char(sysdate,&apos;mm&apos;)    as nowMonth  from dual;   //获取时间的月  </span><br><span class="line">select to_char(sysdate,&apos;dd&apos;)    as nowDay    from dual;   //获取时间的日  </span><br><span class="line">select to_char(sysdate,&apos;hh24&apos;)  as nowHour   from dual;   //获取时间的时  </span><br><span class="line">select to_char(sysdate,&apos;mi&apos;)    as nowMinute from dual;   //获取时间的分  </span><br><span class="line">select to_char(sysdate,&apos;ss&apos;)    as nowSecond from dual;   //获取时间的秒</span><br></pre></td></tr></table></figure><p>2.字符串和时间互转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_date(&apos;2019-05-23 17:45:25&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;) from dual //显示23-MAY-19</span><br><span class="line">select to_char( to_date(222,&apos;J&apos;),&apos;Jsp&apos;) from dual //显示Two Hundred Twenty-Two</span><br></pre></td></tr></table></figure><h1 id="3-字符处理"><a href="#3-字符处理" class="headerlink" title="3.字符处理"></a>3.字符处理</h1><h2 id="1-字符截取-substr（”字符”，a，b）"><a href="#1-字符截取-substr（”字符”，a，b）" class="headerlink" title="1.字符截取 substr（”字符”，a，b）"></a>1.字符截取 substr（”字符”，a，b）</h2><p>只要 |a| ≤ b,取a的个数；当 |a| ≥ b时，才取b的个数，由a决定截取位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;HelloWorld&apos;,0,3) value from dual; //返回结果：Hel，截取从“H”开始3个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,0,100) value from dual; //返回结果：HelloWorld，100虽然超出预处理的字符串最长度，但不会影响返回结果，系统按预处理字符串最大数量返回。</span><br><span class="line">select substr(&apos;HelloWorld&apos;,5,3) value from dual; //返回结果：oWo</span><br><span class="line">select substr(&apos;Hello World&apos;,5,3) value from dual; //返回结果：o W (中间的空格也算一个字符串，结果是：o空格W)</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-1,3) value from dual; //返回结果：d （从后面倒数第一位开始往后取1个字符，而不是3个。）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-2,3) value from dual; //返回结果：ld （从后面倒数第二位开始往后取2个字符，而不是3个 ）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-3,3) value from dual; //返回结果：rld （从后面倒数第三位开始往后取3个字符）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-4,3) value from dual; //返回结果：orl （从后面倒数第四位开始往后取3个字符）</span><br></pre></td></tr></table></figure><p>当只有两个参数时；不管是负几，都是从最后一个开始 往回截取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;HelloWorld&apos;,0) value from dual;  //返回结果：HelloWorld，截取所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,1) value from dual;  //返回结果：HelloWorld，截取所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,2) value from dual;  //返回结果：elloWorld，截取从“e”开始之后所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,3) value from dual;  //返回结果：lloWorld，截取从“l”开始之后所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-1) value from dual;  //返回结果：d，从最后一个“d”开始 往回截取1个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-2) value from dual;  //返回结果：ld，从最后一个“d”开始 往回截取2个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-3) value from dual;  //返回结果：rld，从最后一个“d”开始 往回截取3个字符</span><br></pre></td></tr></table></figure><h1 id="4-常用函数"><a href="#4-常用函数" class="headerlink" title="4.常用函数"></a>4.常用函数</h1><h2 id="1-decode"><a href="#1-decode" class="headerlink" title="1.decode()"></a>1.<strong>decode</strong>()</h2><p><strong>decode</strong>(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p><p>该函数的含义如下：</p><p>IF 条件=值1 THEN<br>RETURN(翻译值1)<br>ELSIF 条件=值2 THEN<br>RETURN(翻译值2)<br>……<br>ELSIF 条件=值n THEN<br>RETURN(翻译值n)<br>ELSE<br>RETURN(缺省值)<br>END IF</p><p>实例：</p><p>select *from users;</p><p><img src="/2019/05/23/Oracle-sql语句学习笔记/decode1.png" alt="img"></p><p>select id, username, age, decode(sex,0,’男’,1,’女’) from users;</p><p><img src="/2019/05/23/Oracle-sql语句学习笔记/decode2.png" alt="img"></p><h2 id="2-nvl-为空值赋值"><a href="#2-nvl-为空值赋值" class="headerlink" title="2.nvl() 为空值赋值"></a>2.nvl() 为空值赋值</h2><p>函数声明：nvl(col,val)</p><p>说明：当col为空时取val作为返回值，当col不为空时取col值。</p><p>用处：最主要的是格式化数据，比如计算金额时，不想出现空数据，可以使用nvl(JINE,0)来得到0。由于null+(或-,*,/）数字等于null，所以在表达式中对可能为空的值要使用nvl由于null!=null，有时对可能为空的列进行条件查询时，可能出现结果集丢失数据问题，加上nvl就不会了。</p><p>nvl2（）</p><p>Oracle在NVL函数的功能上扩展，提供了NVL2函数。</p><p><a href="http://baike.baidu.com/view/3316544.htm" target="_blank" rel="noopener">NVL2</a>(E1, E2, E3)的功能为：如果E1为NULL，则函数返回E3，否则返回E2。E2和E3类型不同的话，E3会转换为E2的类型。</p><p>限制：</p><p>​ 1) E1可以是任意类型，E2,E3不能是long类型。</p><p>​ 2) 如果 E2是字符类型，那么E3转为字符型再比较（null除外）。</p><p>​ 3) 如果 E2是数值类型，那么E3也转为对应的数值类型。</p><p>​ 4) 各个参数都不能是逻辑表达式</p><p>nullif（）</p><p>格式： nullif(expr1,expr2) 等价于 “case when expr1 = expr 2 then null else expr1 end”,相等返回NULL，不等返回expr1.<br>限制： expr1不能是标识符null，录入nullif(null,expr2)那么会提示错误。<br>expr1,expr2 都必须是一个变量或者是一个常量表达式，不能是逻辑表达式。</p><p>lnnvl(a)</p><p>a是一个表达式<br>lnnvl只能用于where子句中；表达式的操作符号不能包含 AND, OR, BETWEEN。<br>如果a的结果是false或者是unknown,那么lnnvl返回true;如果a的结果是true,返回false.<br>“如果a的结果是false或者是unknown,那么lnnvl返回true”,这个很重要，因为一个空值或者unknown的值和另外一个常量或者有值的变量比较的时候，返回的总是unknown,所以<br>lnnvl(a&gt;10) 等价于 nvl(a,0)&lt;=10 等价于 a&lt;=10 or a is null （假设a number(10))<br>说白了，lnnvl是一种特定的用于简化表达式的函数，orcle解析的时候，应该会解析为 “a&lt;=10 or a is null”.</p><h2 id="3-case-when"><a href="#3-case-when" class="headerlink" title="3 case when"></a>3 case when</h2><h3 id="1-CASE-WHEN-表达式有两种形式"><a href="#1-CASE-WHEN-表达式有两种形式" class="headerlink" title="1. CASE WHEN 表达式有两种形式"></a><strong>1. CASE WHEN 表达式有两种形式</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--简单Case函数  </span><br><span class="line"></span><br><span class="line">CASE sex  </span><br><span class="line">WHEN &apos;1&apos; THEN &apos;男&apos;  </span><br><span class="line">WHEN &apos;2&apos; THEN &apos;女&apos;  </span><br><span class="line">ELSE &apos;其他&apos; END  </span><br><span class="line"></span><br><span class="line">--Case搜索函数  </span><br><span class="line"></span><br><span class="line">CASE</span><br><span class="line">WHEN sex = &apos;1&apos; THEN &apos;男&apos;  </span><br><span class="line">WHEN sex = &apos;2&apos; THEN &apos;女&apos;  </span><br><span class="line">ELSE &apos;其他&apos; END</span><br></pre></td></tr></table></figure><h3 id="2-CASE-WHEN-在语句中不同位置的用法"><a href="#2-CASE-WHEN-在语句中不同位置的用法" class="headerlink" title="2. CASE WHEN 在语句中不同位置的用法"></a>2. CASE WHEN 在语句中不同位置的用法</h3><h4 id="2-1-SELECT-CASE-WHEN-用法"><a href="#2-1-SELECT-CASE-WHEN-用法" class="headerlink" title="2.1 SELECT CASE WHEN 用法"></a><strong>2.1 SELECT CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT   grade, COUNT (CASE WHEN sex = 1 THEN 1      /*sex 1为男生，2位女生*/</span><br><span class="line">                       ELSE NULL</span><br><span class="line">                       END) 男生数,</span><br><span class="line">                COUNT (CASE WHEN sex = 2 THEN 1</span><br><span class="line">                       ELSE NULL</span><br><span class="line">                       END) 女生数</span><br><span class="line">    FROM students GROUP BY grade;</span><br></pre></td></tr></table></figure><h4 id="2-3-WHERE-CASE-WHEN-用法"><a href="#2-3-WHERE-CASE-WHEN-用法" class="headerlink" title="2.3 WHERE CASE WHEN 用法"></a><strong>2.3 WHERE CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT T2.*, T1.*</span><br><span class="line">   FROM T1, T2</span><br><span class="line">  WHERE (CASE WHEN T2.COMPARE_TYPE = &apos;A&apos; AND</span><br><span class="line">                   T1.SOME_TYPE LIKE &apos;NOTHING%&apos;</span><br><span class="line">                THEN 1</span><br><span class="line">              WHEN T2.COMPARE_TYPE != &apos;A&apos; AND</span><br><span class="line">                   T1.SOME_TYPE NOT LIKE &apos;NOTHING%&apos;</span><br><span class="line">                THEN 1</span><br><span class="line">              ELSE 0</span><br><span class="line">           END) = 1</span><br></pre></td></tr></table></figure><h4 id="2-4-GROUP-BY-CASE-WHEN-用法"><a href="#2-4-GROUP-BY-CASE-WHEN-用法" class="headerlink" title="2.4 GROUP BY CASE WHEN 用法"></a><strong>2.4 GROUP BY CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT  </span><br><span class="line">CASE WHEN salary &lt;= 500 THEN &apos;1&apos;  </span><br><span class="line">WHEN salary &gt; 500 AND salary &lt;= 600  THEN &apos;2&apos;  </span><br><span class="line">WHEN salary &gt; 600 AND salary &lt;= 800  THEN &apos;3&apos;  </span><br><span class="line">WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &apos;4&apos;  </span><br><span class="line">ELSE NULL END salary_class, -- 别名命名</span><br><span class="line">COUNT(*)  </span><br><span class="line">FROM    Table_A  </span><br><span class="line">GROUP BY  </span><br><span class="line">CASE WHEN salary &lt;= 500 THEN &apos;1&apos;  </span><br><span class="line">WHEN salary &gt; 500 AND salary &lt;= 600  THEN &apos;2&apos;  </span><br><span class="line">WHEN salary &gt; 600 AND salary &lt;= 800  THEN &apos;3&apos;  </span><br><span class="line">WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &apos;4&apos;  </span><br><span class="line">ELSE NULL END;</span><br></pre></td></tr></table></figure><h3 id="3-1-在WHERE中特殊实现"><a href="#3-1-在WHERE中特殊实现" class="headerlink" title="3.1 在WHERE中特殊实现"></a>3.1 在WHERE中特殊实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT T2.*, T1.*</span><br><span class="line">   FROM T1, T2</span><br><span class="line">  WHERE (T2.COMPARE_TYPE = &apos;A&apos; AND T1.SOME_TYPE LIKE &apos;NOTHING%&apos;)</span><br><span class="line">         OR</span><br><span class="line">        (T2.COMPARE_TYPE != &apos;A&apos; AND T1.SOME_TYPE NOT LIKE &apos;NOTHING%&apos;)</span><br></pre></td></tr></table></figure><p>这种方法也是在特殊情况下使用，要多注意逻辑，不要弄错。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word指定位置设置页码</title>
      <link href="/2019/05/18/word%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE%E9%A1%B5%E7%A0%81/"/>
      <url>/2019/05/18/word%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE%E9%A1%B5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><h1 id="word-指定位置设置页码"><a href="#word-指定位置设置页码" class="headerlink" title="word 指定位置设置页码"></a>word 指定位置设置页码</h1><h5 id="1-将光标移到指定页面的第一个字符所在的位置前"><a href="#1-将光标移到指定页面的第一个字符所在的位置前" class="headerlink" title="1.将光标移到指定页面的第一个字符所在的位置前"></a>1.将光标移到指定页面的第一个字符所在的位置前</h5><h5 id="2-选择布局，点击，在“分隔符”选项总中单击“下一页”"><a href="#2-选择布局，点击，在“分隔符”选项总中单击“下一页”" class="headerlink" title="2.选择布局，点击，在“分隔符”选项总中单击“下一页”"></a>2.选择布局，点击，在“分隔符”选项总中单击“下一页”</h5><h5 id="3-在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）"><a href="#3-在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）" class="headerlink" title="3.在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）"></a>3.在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）</h5><h5 id="4-将鼠标移动到灰色状态的“链接到前一节”，点击一下"><a href="#4-将鼠标移动到灰色状态的“链接到前一节”，点击一下" class="headerlink" title="4.将鼠标移动到灰色状态的“链接到前一节”，点击一下"></a>4.将鼠标移动到灰色状态的“链接到前一节”，点击一下</h5><h5 id="5-开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。"><a href="#5-开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。" class="headerlink" title="5.开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。"></a>5.开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。</h5><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程各文档模板</title>
      <link href="/2019/05/18/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%90%84%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/05/18/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%90%84%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><p>​ 可行性报告</p><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 项目背景</li><li>1.3 定义</li></ul></li><li>研究前提<ul><li>2.1 功能要求</li><li>2.2 性能要求</li><li>2.3 限制条件</li></ul></li><li>现有系统分析<ul><li>3.1 处理流程</li><li>3.2 工作负荷</li><li>3.3 费用</li><li>3.4 硬件环境</li><li>3.5 人员配备</li><li>3.6 存在的问题</li></ul></li><li><p>推荐的方案</p></li><li><p>系统范围</p></li><li>经济可行性</li><li>技术可行性</li><li>法律可行性</li><li>可用性评价</li><li>其他项目相关问题</li></ol><h2 id="系统定义文档"><a href="#系统定义文档" class="headerlink" title="系统定义文档"></a>系统定义文档</h2><p>对待开发系统的一个全面、真实、简略的定义性说明文档。</p><ol><li>引言<ul><li>1.1 文档的范围和目的</li><li>1.2 概述<ul><li>1.2.1 目标</li><li>1.2.2 约束条件</li></ul></li></ul></li><li>功能和数据描述<ul><li>2.1 系统体系结构(结构环境图ACD)</li><li>2.2 ACD描述说明</li></ul></li><li>子系统描述<ul><li>3.1 子系统N的体系结构图定义<ul><li>3.1.1 体系结构流程图AFD</li><li>3.1.2 系统模块描述</li><li>3.1.3 性能问题描述</li><li>3.1.4 设计约束</li><li>3.1.5 系统构件分配</li></ul></li><li>3.2 体系结构字典</li><li>3.3 结构互连图及其描述</li></ul></li><li>系统模型化和模拟结果<ul><li>4.1 用于模拟的系统模型</li><li>4.2 模拟结果</li><li>4.3 特殊的性能问题讨论</li></ul></li><li>项目问题<ul><li>5.1 项目开发成本</li><li>5.2 项目进度安排</li></ul></li><li>附录</li></ol><h2 id="需求规格说明书"><a href="#需求规格说明书" class="headerlink" title="需求规格说明书"></a>需求规格说明书</h2><ol><li>引言<ul><li>1.1 编写的目的</li><li>1.2 项目背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>任务概述<ul><li>2.1 目标</li><li>2.2 运行环境</li><li>2.3 条件与约束</li></ul></li><li>数据描述<ul><li>3.1 静态数据</li><li>3.2 动态数据</li><li>3.3 数据库描述</li><li>3.4 数据字典</li><li>3.5 数据采集</li></ul></li><li>功能需求<ul><li>4.1 功能划分</li><li>4.2 功能描述</li></ul></li><li>性能需求<ul><li>5.1 数据精确度</li><li>5.2 时间特性</li><li>5.3 适应性</li></ul></li><li>运行需求<ul><li>6.1 用户界面</li><li>6.2 硬件接口</li><li>6.3 软件接口</li><li>6.4 故障处理</li></ul></li><li>其他需求<ul><li>可使用性</li><li>安全保密性</li><li>可维护性</li><li>可移植性</li></ul></li></ol><h2 id="概要设计说明书"><a href="#概要设计说明书" class="headerlink" title="概要设计说明书"></a>概要设计说明书</h2><ol><li>引言<ul><li>1.1 编写的目的</li><li>1.2 项目背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li><p>任务概述</p><ul><li>2.1 目标</li><li>2.2 运行环境</li><li>2.3 需求概述</li><li>2.4 条件与限制</li></ul></li><li><p>总体设计</p><ul><li>3.1 处理流程</li><li>3.2 总体结构和模块外部设计（结构图）</li><li>3.3 功能分配：表明各功能与程序的关系</li></ul></li><li>接口设计<ul><li>4.1 外部接口：用户界面、软件接口、硬件接口</li><li>4.2 内部接口：模块之间的接口</li></ul></li><li>数据结构设计<ul><li>5.1 逻辑结构设计</li><li>5.2 物理结构设计</li><li>5.3 数据结构与程序的关系</li></ul></li><li>运行设计<ul><li>6.1 运行模块的组合</li><li>6.2 运行控制</li><li>6.3 运行时间</li></ul></li><li>出错处理设计<ul><li>7.1 出错输出信息</li><li>7.2 出错处理对策</li></ul></li><li>安全保密设计</li><li>维护设计</li></ol><h2 id="用例文档"><a href="#用例文档" class="headerlink" title="用例文档"></a>用例文档</h2><ol><li>用例编号</li><li>用例名</li><li>用例描述</li><li>参与者</li><li>前置条件</li><li>后置条件</li><li>基本路径<ul><li>1…….XXXX</li><li>2 …….XXXX</li><li>3 …….XXXX</li></ul></li><li>扩展点<ul><li>2a. XXXX</li><li>2a1….XXXXX</li></ul></li><li>补充说明</li></ol><h2 id="详细设计说明书"><a href="#详细设计说明书" class="headerlink" title="详细设计说明书"></a>详细设计说明书</h2><ol><li>引言<ul><li>1.1 编写目的：目的，阅读对象</li><li>1.2 项目背景：项目来源，主管部门</li><li>1.3 定义：术语定义，缩写词原意</li><li>1.4 参考资料：资料版本，作者，来源…</li></ul></li><li>程序描述<ul><li>2.1 功能</li><li>2.2 性能</li><li>2.3 输出和输入项目</li><li>2.4 算法</li><li>2.5 程序逻辑：流程图，NS图，PDL，判定树，判定表…</li><li>2.6 接口</li><li>2.7 存储分配</li><li>2.8 限制条件</li><li>2.9 测试要点</li></ul></li></ol><h2 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h2><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>计划<ul><li>2.1 软件说明</li><li>2.2 测试内容</li><li>2.3 测试1(标识符)</li><li>2.3.1 进度安排</li><li>2.3.2 条件<ul><li>a. 设备</li><li>b. 软件</li><li>c. 人员</li></ul></li><li>2.3.3 测试资料<ul><li>a. 有关本项任务的文件</li><li>b. 被测试程序及其所在的媒体</li><li>c. 测试的输入和输出举例</li><li>d. 有关控制此项测试的方法、过程的图表</li></ul></li><li>2.3.4 测试培训</li><li>2.4 测试2(标识符)</li></ul></li><li>测试设计说明<ul><li>3.1 测试1(标识符)</li><li>3.1 .1 控制</li><li>3.1.2 输入</li><li>3.1.3 输出</li><li>3.2 测试2(标识符)</li></ul></li><li>评价准则<ul><li>4.1 范围</li><li>4.2 数据整理</li><li>4.3 尺寸</li></ul></li></ol><h2 id="测试分析报告："><a href="#测试分析报告：" class="headerlink" title="测试分析报告："></a>测试分析报告：</h2><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>测试概要</li><li>测试结果及发现<ul><li>3.1 测试1(标识符)</li><li>3.2 测试2(标识符)</li></ul></li><li>对软件功能的结论<ul><li>4.1 功能1(标识符)</li><li>4.1.1 能力</li><li>4.1.2 限制</li><li>4.2 功能2(标识符)</li></ul></li><li>分析摘要<ul><li>5.1 能力</li><li>5.2 缺限和限制</li><li>5.3 建议 a. 各项修改可采用的修改方法程度<ul><li>b. 各项修改的紧迫程度</li><li>c. 各项修改预定的工作量</li><li>d. 各项修改的负责人</li></ul></li><li>5.4 评价</li></ul></li><li>测试资源消耗</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2019/05/14/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/14/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><h1 id="Git常用命令总结"><a href="#Git常用命令总结" class="headerlink" title="Git常用命令总结"></a>Git常用命令总结</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><strong>git init</strong></h2><p>​ 在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h2><p>​ 获取一个url对应的远程Git repo, 创建一个local copy.</p><p>​ 一般的格式是git clone [url].</p><p>​ clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><strong>git status</strong></h2><p>​ 查询repo的状态.</p><p>​ git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><strong>git log</strong></h2><p>​ show commit history of a branch.</p><p>​ git log –oneline –number: 每条log只显示一行,显示number条.</p><p>​ git log –oneline –graph:可以图形化地表示出分支合并历史.</p><p>​ git log branchname可以显示特定分支的log.</p><p>​ git log –oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).</p><p>​ git log –decorate会显示出tag信息.</p><p>​ git log –author=[author name] 可以指定作者的提交历史.</p><p>​ git log –since –before –until –after 根据提交时间筛选log.</p><p>​ –no-merges可以将merge的commits排除在外.</p><p>​ git log –grep 根据commit信息过滤log: git log –grep=keywords</p><p>​ 默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.</p><p>​ git log -S: filter by introduced diff.</p><p>​ 比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).</p><p>​ git log -p: show patch introduced at each commit.</p><p>​ 每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.</p><p>​ 另一种方法是git show [SHA].</p><p>​ git log –stat: show diffstat of changes introduced at each commit.</p><p>​ 同样是用来看改动的相对信息的,–stat比-p的输出更简单一些.</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h2><p>​ 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.</p><p>​ git add .</p><p>​ 会递归地添加当前工作目录中的所有文件.</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><strong>git diff</strong></h2><p>​ 不加参数的git diff:</p><p>​ show diff of unstaged changes.</p><p>​ 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.</p><p>​ 若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:</p><p>​ git diff –cached 命令.</p><p>​ show diff of staged changes.</p><p>​ (Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的).</p><p>​ git diff HEAD</p><p>​ show diff of all staged or unstated changes.</p><p>​ 也即比较woking directory和上次提交之间所有的改动.</p><p>​ 如果想看自从某个版本之后都改动了什么,可以用:</p><p>​ git diff [version tag]</p><p>​ 跟log命令一样,diff也可以加上–stat参数来简化输出.</p><p>​ git diff [branchA] [branchB]可以用来比较两个分支.</p><p>​ 它实际上会返回一个由A到B的patch,不是我们想要的结果.</p><p>​ 一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:</p><p>​ git diff [branchA]…[branchB]给出的.</p><p>​ 实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h2><p>​ 提交已经被add进来的改动.</p><p>​ git commit -m “the commit message”</p><p>​ git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.</p><p>​ git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h2><p>​ undo changes and commits.</p><p>​ 这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.</p><p>​ git reset HEAD: unstage files from index and reset pointer to HEAD</p><p>​ 这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.</p><p>​ git reset –soft</p><p>​ move HEAD to specific commit reference, index and staging are untouched.</p><p>​ git reset –hard</p><p>​ unstage files AND undo any changes in the working directory since last commit.</p><p>​ 使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.</p><p>​ 这里的HEAD可以被写成任何一次提交的SHA-1.</p><p>​ 不带soft和hard参数的git reset,实际上带的是默认参数mixed.</p><p>​ 总结:</p><p>​ git reset –mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.</p><p>​ git reset –soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.</p><p>​ git reset –hard id.是将git的HEAD变了,文件也变了.</p><p>​ 按改动范围排序如下:</p><p>​ soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working)</p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><strong>git revert</strong></h2><p>​ 反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.</p><p>​ git revert HEAD: 撤销最近的一个提交.</p><p>​ git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><strong>git rm</strong></h2><p>​ git rm file: 从staging区移除文件,同时也移除出工作目录.</p><p>​ git rm –cached: 从staging区移除文件,但留在工作目录中.</p><p>​ git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.</p><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a><strong>git clean</strong></h2><p>​ git clean是从工作目录中移除没有track的文件.</p><p>​ 通常的参数是git clean -df:</p><p>​ -d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.</p><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a><strong>git mv</strong></h2><p>​ git rm - - cached orig; mv orig new; git add new</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><strong>git stash</strong></h2><p>​ 把当前的改动压入一个栈.</p><p>​ git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.</p><p>​ git stash list会显示这个栈的list.</p><p>​ git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.</p><p>​ 也可以指定别的项目,比如git stash apply stash@{1}.</p><p>​ 如果你在应用stash中项目的同时想要删除它,可以用git stash pop</p><p>​ 删除stash中的项目:</p><p>​ git stash drop: 删除上一个,也可指定参数删除指定的一个项目.</p><p>​ git stash clear: 删除所有项目.</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><strong>git branch</strong></h2><p>​ git branch可以用来列出分支,创建分支和删除分支.</p><p>​ git branch -v可以看见每一个分支的最后一次提交.</p><p>​ git branch: 列出本地所有分支,当前分支会被星号标示出.</p><p>​ git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).</p><p>​ git branch -d (branchname): 删除一个分支.</p><p>​ 删除remote的分支:</p><p>​ git push (remote-name) :(branch-name): delete a remote branch.</p><p>​ 这个是因为完整的命令形式是:</p><p>​ git push remote-name local-branch:remote-branch</p><p>​ 而这里local-branch的部分为空,就意味着删除了remote-branch</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h2><p>git checkout (branchname)切换到一个分支.</p><p>​ git checkout -b (branchname): 创建并切换到新的分支.</p><p>​ 这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.</p><p>​ checkout还有另一个作用:替换本地改动:</p><p>​ git checkout –<filename></filename></p><p>​ 此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.</p><p>​ 注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><strong>git merge</strong></h2><p>​ 把一个分支merge进当前的分支.</p><p>​ git merge [alias]/[branch]</p><p>​ 把远程分支merge到当前分支.</p><p>​ 如果出现冲突,需要手动修改,可以用git mergetool.</p><p>​ 解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.</p><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a><strong>git tag</strong></h2><p>​ tag a point in history as import.</p><p>​ 会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.</p><p>​ 比如: git tag v1.0</p><p>​ git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.</p><p>​ 当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息</p><p>​ 我们可以利用commit SHA来给一个过去的提交打tag:</p><p>​ git tag -a v0.9 XXXX</p><p>​ push的时候是不包含tag的,如果想包含,可以在push时加上–tags参数.</p><p>​ fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上–tags选项.</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h2><p>​ list, add and delete remote repository aliases.</p><p>​ 因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.</p><p>​ git remote: 列出remote aliases.</p><p>​ 如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.</p><p>​ git remote -v:可以看见每一个别名对应的实际url.</p><p>​ git remote add [alias] [url]: 添加一个新的remote repo.</p><p>​ git remote rm [alias]: 删除一个存在的remote alias.</p><p>​ git remote rename [old-alias] [new-alias]: 重命名.</p><p>​ git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h2><p>​ download new branches and data from a remote repository.</p><p>​ 可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repo</p><p>​ fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们.</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h2><p>​ fetch from a remote repo and try to merge into the current branch.</p><p>​ pull == fetch + merge FETCH_HEAD</p><p>​ git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.</p><p>​ 如果使用–rebase参数,它会执行git rebase来取代原来的git merge.</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><strong>git rebase</strong></h2><p>​ –rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.</p><p>​ rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:</p><p>​ git rebase –continue就会继续打余下的补丁.</p><p>​ git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态.</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h2><p>​ push your new branches and data to a remote repository.</p><p>​ git push [alias] [branch]</p><p>​ 将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.</p><p>​ 如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.</p><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a><strong>git reflog</strong></h2><p>​ git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.</p><p>​ 当git reflog不指定引用的时候,默认列出HEAD的reflog.</p><p>​ HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.</p><p>​ git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号:"></a><strong>特殊符号:</strong></h2><p>​ ^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.</p><p>​ ~<n>相当于连续的<n>个^.</n></n></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Git Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超爽踩点</title>
      <link href="/2019/05/14/%E8%B6%85%E7%88%BD%E8%B8%A9%E7%82%B9/"/>
      <url>/2019/05/14/%E8%B6%85%E7%88%BD%E8%B8%A9%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Aug 02 2019 11:41:47 GMT+0800 (中国标准时间) --><h1 id="视频Demo："><a href="#视频Demo：" class="headerlink" title="视频Demo："></a>视频Demo：</h1><div style="position:relative;width:100%;height:0;padding-bottom:75%;display:inline-block;margin-left:13%"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=21822311&cid=36012220&page=1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><h1 id="图片Demo："><a href="#图片Demo：" class="headerlink" title="图片Demo："></a>图片Demo：</h1><p><img src="/2019/05/14/超爽踩点/timg.jpg" alt="Test"></p><h6 id="摘要图片大小为-801-309"><a href="#摘要图片大小为-801-309" class="headerlink" title="摘要图片大小为 801*309"></a>摘要图片大小为 801*309</h6><p>模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $(<span class="string">"#xxx"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     $.post(<span class="string">"xxx//路径"</span>,                     &#123;<span class="string">"oid"</span>:$(<span class="string">"#xxx"</span>).val(),<span class="string">"uid"</span>:$(<span class="string">"#xxx"</span>).val()&#125;,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,<span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
            <tag> vedio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

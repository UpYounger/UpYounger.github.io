<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>别打我很疼ღ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://upyounger.github.io/"/>
  <updated>2019-05-23T12:04:32.600Z</updated>
  <id>https://upyounger.github.io/</id>
  
  <author>
    <name>别打我很疼ღ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracle sql语句学习笔记</title>
    <link href="https://upyounger.github.io/2019/05/23/Oracle-sql%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://upyounger.github.io/2019/05/23/Oracle-sql语句学习笔记/</id>
    <published>2019-05-23T08:18:36.000Z</published>
    <updated>2019-05-23T12:04:32.600Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --><h1 id="Oracle-sql语句学习笔记"><a href="#Oracle-sql语句学习笔记" class="headerlink" title="Oracle  sql语句学习笔记"></a>Oracle sql语句学习笔记</h1><p>本笔记记录本人学习过程中常用到的知识</p><h1 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h1><p>oracle的分页查询有多重书写方式（深入学习oracle语句请参考官方文档），不同的书写方式效率也不同,下面是一种效率较高的写法。/<em> 这个表示注释</em>/</p><p>这个方法嵌套一层，速度快，当数据量大时，速度也很快。这种方法，在里层嵌套控制的查询的最大值，在最外层控制的最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM </span><br><span class="line">    (</span><br><span class="line">        SELECT </span><br><span class="line">            ROWNUM AS rowno, t.*</span><br><span class="line">        FROM </span><br><span class="line">            SqlLearn /*(待查询的数据表）*/ t</span><br><span class="line">        WHERE </span><br><span class="line">            Edition BETWEEN &apos;2018&apos;  AND &apos;2022&apos;</span><br><span class="line">        AND </span><br><span class="line">            ROWNUM &lt;= 15 /*（要查询的分页  本例从10到15）*/</span><br><span class="line">    ) SqlLearn_page</span><br><span class="line"> WHERE </span><br><span class="line">    SqlLearn_page.rowno &gt;= 10;</span><br></pre></td></tr></table></figure><p>也可以这样写：这时候在最外层控制最大值和最小值 ，相对来说第一种方法效率较高一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line"></span><br><span class="line">  FROM (SELECT a.*, ROWNUM rn</span><br><span class="line"></span><br><span class="line">          FROM (SELECT *</span><br><span class="line"></span><br><span class="line">                  FROM SqlLearn  WHERE </span><br><span class="line">            Edition BETWEEN &apos;2018&apos;  AND &apos;2022&apos;) a)</span><br><span class="line"></span><br><span class="line"> WHERE rn BETWEEN 10 AND 15</span><br></pre></td></tr></table></figure><h1 id="2-日期处理"><a href="#2-日期处理" class="headerlink" title="2.日期处理"></a>2.日期处理</h1><p>TO_DATE格式(以时间:2019-05-23 17:45:25为例)</p><p>1.日期和字符转换函数用法（to_date,to_char）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) as nowTime from dual;   //日期转化为字符串  </span><br><span class="line">select to_char(sysdate,&apos;yyyy&apos;)  as nowYear   from dual;   //获取时间的年  </span><br><span class="line">select to_char(sysdate,&apos;mm&apos;)    as nowMonth  from dual;   //获取时间的月  </span><br><span class="line">select to_char(sysdate,&apos;dd&apos;)    as nowDay    from dual;   //获取时间的日  </span><br><span class="line">select to_char(sysdate,&apos;hh24&apos;)  as nowHour   from dual;   //获取时间的时  </span><br><span class="line">select to_char(sysdate,&apos;mi&apos;)    as nowMinute from dual;   //获取时间的分  </span><br><span class="line">select to_char(sysdate,&apos;ss&apos;)    as nowSecond from dual;   //获取时间的秒</span><br></pre></td></tr></table></figure><p>2.字符串和时间互转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_date(&apos;2019-05-23 17:45:25&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;) from dual //显示23-MAY-19</span><br><span class="line">select to_char( to_date(222,&apos;J&apos;),&apos;Jsp&apos;) from dual //显示Two Hundred Twenty-Two</span><br></pre></td></tr></table></figure><h1 id="3-字符处理"><a href="#3-字符处理" class="headerlink" title="3.字符处理"></a>3.字符处理</h1><h2 id="1-字符截取-substr（”字符”，a，b）"><a href="#1-字符截取-substr（”字符”，a，b）" class="headerlink" title="1.字符截取 substr（”字符”，a，b）"></a>1.字符截取 substr（”字符”，a，b）</h2><p>只要 |a| ≤ b,取a的个数；当 |a| ≥ b时，才取b的个数，由a决定截取位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;HelloWorld&apos;,0,3) value from dual; //返回结果：Hel，截取从“H”开始3个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,0,100) value from dual; //返回结果：HelloWorld，100虽然超出预处理的字符串最长度，但不会影响返回结果，系统按预处理字符串最大数量返回。</span><br><span class="line">select substr(&apos;HelloWorld&apos;,5,3) value from dual; //返回结果：oWo</span><br><span class="line">select substr(&apos;Hello World&apos;,5,3) value from dual; //返回结果：o W (中间的空格也算一个字符串，结果是：o空格W)</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-1,3) value from dual; //返回结果：d （从后面倒数第一位开始往后取1个字符，而不是3个。）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-2,3) value from dual; //返回结果：ld （从后面倒数第二位开始往后取2个字符，而不是3个 ）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-3,3) value from dual; //返回结果：rld （从后面倒数第三位开始往后取3个字符）</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-4,3) value from dual; //返回结果：orl （从后面倒数第四位开始往后取3个字符）</span><br></pre></td></tr></table></figure><p>当只有两个参数时；不管是负几，都是从最后一个开始 往回截取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;HelloWorld&apos;,0) value from dual;  //返回结果：HelloWorld，截取所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,1) value from dual;  //返回结果：HelloWorld，截取所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,2) value from dual;  //返回结果：elloWorld，截取从“e”开始之后所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,3) value from dual;  //返回结果：lloWorld，截取从“l”开始之后所有字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-1) value from dual;  //返回结果：d，从最后一个“d”开始 往回截取1个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-2) value from dual;  //返回结果：ld，从最后一个“d”开始 往回截取2个字符</span><br><span class="line">select substr(&apos;HelloWorld&apos;,-3) value from dual;  //返回结果：rld，从最后一个“d”开始 往回截取3个字符</span><br></pre></td></tr></table></figure><h1 id="4-常用函数"><a href="#4-常用函数" class="headerlink" title="4.常用函数"></a>4.常用函数</h1><h2 id="1-decode"><a href="#1-decode" class="headerlink" title="1.decode()"></a>1.<strong>decode</strong>()</h2><p><strong>decode</strong>(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p><p>该函数的含义如下：</p><p>IF 条件=值1 THEN<br>RETURN(翻译值1)<br>ELSIF 条件=值2 THEN<br>RETURN(翻译值2)<br>……<br>ELSIF 条件=值n THEN<br>RETURN(翻译值n)<br>ELSE<br>RETURN(缺省值)<br>END IF</p><p>实例：</p><p>select *from users;</p><p><img src="/2019/05/23/Oracle-sql语句学习笔记/decode1.png" alt="img"></p><p>select id, username, age, decode(sex,0,’男’,1,’女’) from users;</p><p><img src="/2019/05/23/Oracle-sql语句学习笔记/decode2.png" alt="img"></p><h2 id="2-nvl-为空值赋值"><a href="#2-nvl-为空值赋值" class="headerlink" title="2.nvl() 为空值赋值"></a>2.nvl() 为空值赋值</h2><p>函数声明：nvl(col,val)</p><p>说明：当col为空时取val作为返回值，当col不为空时取col值。</p><p>用处：最主要的是格式化数据，比如计算金额时，不想出现空数据，可以使用nvl(JINE,0)来得到0。由于null+(或-,*,/）数字等于null，所以在表达式中对可能为空的值要使用nvl由于null!=null，有时对可能为空的列进行条件查询时，可能出现结果集丢失数据问题，加上nvl就不会了。</p><p>nvl2（）</p><p>Oracle在NVL函数的功能上扩展，提供了NVL2函数。</p><p><a href="http://baike.baidu.com/view/3316544.htm" target="_blank" rel="noopener">NVL2</a>(E1, E2, E3)的功能为：如果E1为NULL，则函数返回E3，否则返回E2。E2和E3类型不同的话，E3会转换为E2的类型。</p><p>限制：</p><p>​ 1) E1可以是任意类型，E2,E3不能是long类型。</p><p>​ 2) 如果 E2是字符类型，那么E3转为字符型再比较（null除外）。</p><p>​ 3) 如果 E2是数值类型，那么E3也转为对应的数值类型。</p><p>​ 4) 各个参数都不能是逻辑表达式</p><p>nullif（）</p><p>格式： nullif(expr1,expr2) 等价于 “case when expr1 = expr 2 then null else expr1 end”,相等返回NULL，不等返回expr1.<br>限制： expr1不能是标识符null，录入nullif(null,expr2)那么会提示错误。<br>expr1,expr2 都必须是一个变量或者是一个常量表达式，不能是逻辑表达式。</p><p>lnnvl(a)</p><p>a是一个表达式<br>lnnvl只能用于where子句中；表达式的操作符号不能包含 AND, OR, BETWEEN。<br>如果a的结果是false或者是unknown,那么lnnvl返回true;如果a的结果是true,返回false.<br>“如果a的结果是false或者是unknown,那么lnnvl返回true”,这个很重要，因为一个空值或者unknown的值和另外一个常量或者有值的变量比较的时候，返回的总是unknown,所以<br>lnnvl(a&gt;10) 等价于 nvl(a,0)&lt;=10 等价于 a&lt;=10 or a is null （假设a number(10))<br>说白了，lnnvl是一种特定的用于简化表达式的函数，orcle解析的时候，应该会解析为 “a&lt;=10 or a is null”.</p><h2 id="3-case-when"><a href="#3-case-when" class="headerlink" title="3 case when"></a>3 case when</h2><h3 id="1-CASE-WHEN-表达式有两种形式"><a href="#1-CASE-WHEN-表达式有两种形式" class="headerlink" title="1. CASE WHEN 表达式有两种形式"></a><strong>1. CASE WHEN 表达式有两种形式</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--简单Case函数  </span><br><span class="line"></span><br><span class="line">CASE sex  </span><br><span class="line">WHEN &apos;1&apos; THEN &apos;男&apos;  </span><br><span class="line">WHEN &apos;2&apos; THEN &apos;女&apos;  </span><br><span class="line">ELSE &apos;其他&apos; END  </span><br><span class="line"></span><br><span class="line">--Case搜索函数  </span><br><span class="line"></span><br><span class="line">CASE</span><br><span class="line">WHEN sex = &apos;1&apos; THEN &apos;男&apos;  </span><br><span class="line">WHEN sex = &apos;2&apos; THEN &apos;女&apos;  </span><br><span class="line">ELSE &apos;其他&apos; END</span><br></pre></td></tr></table></figure><h3 id="2-CASE-WHEN-在语句中不同位置的用法"><a href="#2-CASE-WHEN-在语句中不同位置的用法" class="headerlink" title="2. CASE WHEN 在语句中不同位置的用法"></a>2. CASE WHEN 在语句中不同位置的用法</h3><h4 id="2-1-SELECT-CASE-WHEN-用法"><a href="#2-1-SELECT-CASE-WHEN-用法" class="headerlink" title="2.1 SELECT CASE WHEN 用法"></a><strong>2.1 SELECT CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT   grade, COUNT (CASE WHEN sex = 1 THEN 1      /*sex 1为男生，2位女生*/</span><br><span class="line">                       ELSE NULL</span><br><span class="line">                       END) 男生数,</span><br><span class="line">                COUNT (CASE WHEN sex = 2 THEN 1</span><br><span class="line">                       ELSE NULL</span><br><span class="line">                       END) 女生数</span><br><span class="line">    FROM students GROUP BY grade;</span><br></pre></td></tr></table></figure><h4 id="2-3-WHERE-CASE-WHEN-用法"><a href="#2-3-WHERE-CASE-WHEN-用法" class="headerlink" title="2.3 WHERE CASE WHEN 用法"></a><strong>2.3 WHERE CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT T2.*, T1.*</span><br><span class="line">   FROM T1, T2</span><br><span class="line">  WHERE (CASE WHEN T2.COMPARE_TYPE = &apos;A&apos; AND</span><br><span class="line">                   T1.SOME_TYPE LIKE &apos;NOTHING%&apos;</span><br><span class="line">                THEN 1</span><br><span class="line">              WHEN T2.COMPARE_TYPE != &apos;A&apos; AND</span><br><span class="line">                   T1.SOME_TYPE NOT LIKE &apos;NOTHING%&apos;</span><br><span class="line">                THEN 1</span><br><span class="line">              ELSE 0</span><br><span class="line">           END) = 1</span><br></pre></td></tr></table></figure><h4 id="2-4-GROUP-BY-CASE-WHEN-用法"><a href="#2-4-GROUP-BY-CASE-WHEN-用法" class="headerlink" title="2.4 GROUP BY CASE WHEN 用法"></a><strong>2.4 GROUP BY CASE WHEN 用法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT  </span><br><span class="line">CASE WHEN salary &lt;= 500 THEN &apos;1&apos;  </span><br><span class="line">WHEN salary &gt; 500 AND salary &lt;= 600  THEN &apos;2&apos;  </span><br><span class="line">WHEN salary &gt; 600 AND salary &lt;= 800  THEN &apos;3&apos;  </span><br><span class="line">WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &apos;4&apos;  </span><br><span class="line">ELSE NULL END salary_class, -- 别名命名</span><br><span class="line">COUNT(*)  </span><br><span class="line">FROM    Table_A  </span><br><span class="line">GROUP BY  </span><br><span class="line">CASE WHEN salary &lt;= 500 THEN &apos;1&apos;  </span><br><span class="line">WHEN salary &gt; 500 AND salary &lt;= 600  THEN &apos;2&apos;  </span><br><span class="line">WHEN salary &gt; 600 AND salary &lt;= 800  THEN &apos;3&apos;  </span><br><span class="line">WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &apos;4&apos;  </span><br><span class="line">ELSE NULL END;</span><br></pre></td></tr></table></figure><h3 id="3-1-在WHERE中特殊实现"><a href="#3-1-在WHERE中特殊实现" class="headerlink" title="3.1 在WHERE中特殊实现"></a>3.1 在WHERE中特殊实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT T2.*, T1.*</span><br><span class="line">   FROM T1, T2</span><br><span class="line">  WHERE (T2.COMPARE_TYPE = &apos;A&apos; AND T1.SOME_TYPE LIKE &apos;NOTHING%&apos;)</span><br><span class="line">         OR</span><br><span class="line">        (T2.COMPARE_TYPE != &apos;A&apos; AND T1.SOME_TYPE NOT LIKE &apos;NOTHING%&apos;)</span><br></pre></td></tr></table></figure><p>这种方法也是在特殊情况下使用，要多注意逻辑，不要弄错。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Oracle-sql语句学习笔记&quot;&gt;&lt;a href=&quot;#Oracle-sql语句学习笔记&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="sql" scheme="https://upyounger.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://upyounger.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>word指定位置设置页码</title>
    <link href="https://upyounger.github.io/2019/05/18/word%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE%E9%A1%B5%E7%A0%81/"/>
    <id>https://upyounger.github.io/2019/05/18/word指定位置设置页码/</id>
    <published>2019-05-18T13:22:48.000Z</published>
    <updated>2019-05-18T13:31:49.271Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --><h1 id="word-指定位置设置页码"><a href="#word-指定位置设置页码" class="headerlink" title="word 指定位置设置页码"></a>word 指定位置设置页码</h1><h5 id="1-将光标移到指定页面的第一个字符所在的位置前"><a href="#1-将光标移到指定页面的第一个字符所在的位置前" class="headerlink" title="1.将光标移到指定页面的第一个字符所在的位置前"></a>1.将光标移到指定页面的第一个字符所在的位置前</h5><h5 id="2-选择布局，点击，在“分隔符”选项总中单击“下一页”"><a href="#2-选择布局，点击，在“分隔符”选项总中单击“下一页”" class="headerlink" title="2.选择布局，点击，在“分隔符”选项总中单击“下一页”"></a>2.选择布局，点击，在“分隔符”选项总中单击“下一页”</h5><h5 id="3-在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）"><a href="#3-在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）" class="headerlink" title="3.在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）"></a>3.在“插入中”选择“页码”，在出现的下拉选项中选择“页面底端”；待其下属选项出来了，再选择“普通数字2”。（自定也页码）</h5><h5 id="4-将鼠标移动到灰色状态的“链接到前一节”，点击一下"><a href="#4-将鼠标移动到灰色状态的“链接到前一节”，点击一下" class="headerlink" title="4.将鼠标移动到灰色状态的“链接到前一节”，点击一下"></a>4.将鼠标移动到灰色状态的“链接到前一节”，点击一下</h5><h5 id="5-开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。"><a href="#5-开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。" class="headerlink" title="5.开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。"></a>5.开始给指定的页面给Word设置页码：点击左上角的“页码”；然后再点击一下“设置页码格式”。在弹出的“页码格式”弹窗中，给页码编号选择“起始页码”，设置成想要的页码数，确定。</h5><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;word-指定位置设置页码&quot;&gt;&lt;a href=&quot;#word-指定位置设置页码&quot; class=&quot;headerlink&quot; title=&quot;word
      
    
    </summary>
    
      <category term="Tools" scheme="https://upyounger.github.io/categories/Tools/"/>
    
    
      <category term="word" scheme="https://upyounger.github.io/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>软件工程各文档模板</title>
    <link href="https://upyounger.github.io/2019/05/18/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%90%84%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/"/>
    <id>https://upyounger.github.io/2019/05/18/软件工程各文档模板/</id>
    <published>2019-05-18T01:17:21.000Z</published>
    <updated>2019-05-18T01:23:20.205Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --><p>​ 可行性报告</p><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 项目背景</li><li>1.3 定义</li></ul></li><li>研究前提<ul><li>2.1 功能要求</li><li>2.2 性能要求</li><li>2.3 限制条件</li></ul></li><li>现有系统分析<ul><li>3.1 处理流程</li><li>3.2 工作负荷</li><li>3.3 费用</li><li>3.4 硬件环境</li><li>3.5 人员配备</li><li>3.6 存在的问题</li></ul></li><li><p>推荐的方案</p></li><li><p>系统范围</p></li><li>经济可行性</li><li>技术可行性</li><li>法律可行性</li><li>可用性评价</li><li>其他项目相关问题</li></ol><h2 id="系统定义文档"><a href="#系统定义文档" class="headerlink" title="系统定义文档"></a>系统定义文档</h2><p>对待开发系统的一个全面、真实、简略的定义性说明文档。</p><ol><li>引言<ul><li>1.1 文档的范围和目的</li><li>1.2 概述<ul><li>1.2.1 目标</li><li>1.2.2 约束条件</li></ul></li></ul></li><li>功能和数据描述<ul><li>2.1 系统体系结构(结构环境图ACD)</li><li>2.2 ACD描述说明</li></ul></li><li>子系统描述<ul><li>3.1 子系统N的体系结构图定义<ul><li>3.1.1 体系结构流程图AFD</li><li>3.1.2 系统模块描述</li><li>3.1.3 性能问题描述</li><li>3.1.4 设计约束</li><li>3.1.5 系统构件分配</li></ul></li><li>3.2 体系结构字典</li><li>3.3 结构互连图及其描述</li></ul></li><li>系统模型化和模拟结果<ul><li>4.1 用于模拟的系统模型</li><li>4.2 模拟结果</li><li>4.3 特殊的性能问题讨论</li></ul></li><li>项目问题<ul><li>5.1 项目开发成本</li><li>5.2 项目进度安排</li></ul></li><li>附录</li></ol><h2 id="需求规格说明书"><a href="#需求规格说明书" class="headerlink" title="需求规格说明书"></a>需求规格说明书</h2><ol><li>引言<ul><li>1.1 编写的目的</li><li>1.2 项目背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>任务概述<ul><li>2.1 目标</li><li>2.2 运行环境</li><li>2.3 条件与约束</li></ul></li><li>数据描述<ul><li>3.1 静态数据</li><li>3.2 动态数据</li><li>3.3 数据库描述</li><li>3.4 数据字典</li><li>3.5 数据采集</li></ul></li><li>功能需求<ul><li>4.1 功能划分</li><li>4.2 功能描述</li></ul></li><li>性能需求<ul><li>5.1 数据精确度</li><li>5.2 时间特性</li><li>5.3 适应性</li></ul></li><li>运行需求<ul><li>6.1 用户界面</li><li>6.2 硬件接口</li><li>6.3 软件接口</li><li>6.4 故障处理</li></ul></li><li>其他需求<ul><li>可使用性</li><li>安全保密性</li><li>可维护性</li><li>可移植性</li></ul></li></ol><h2 id="概要设计说明书"><a href="#概要设计说明书" class="headerlink" title="概要设计说明书"></a>概要设计说明书</h2><ol><li>引言<ul><li>1.1 编写的目的</li><li>1.2 项目背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li><p>任务概述</p><ul><li>2.1 目标</li><li>2.2 运行环境</li><li>2.3 需求概述</li><li>2.4 条件与限制</li></ul></li><li><p>总体设计</p><ul><li>3.1 处理流程</li><li>3.2 总体结构和模块外部设计（结构图）</li><li>3.3 功能分配：表明各功能与程序的关系</li></ul></li><li>接口设计<ul><li>4.1 外部接口：用户界面、软件接口、硬件接口</li><li>4.2 内部接口：模块之间的接口</li></ul></li><li>数据结构设计<ul><li>5.1 逻辑结构设计</li><li>5.2 物理结构设计</li><li>5.3 数据结构与程序的关系</li></ul></li><li>运行设计<ul><li>6.1 运行模块的组合</li><li>6.2 运行控制</li><li>6.3 运行时间</li></ul></li><li>出错处理设计<ul><li>7.1 出错输出信息</li><li>7.2 出错处理对策</li></ul></li><li>安全保密设计</li><li>维护设计</li></ol><h2 id="用例文档"><a href="#用例文档" class="headerlink" title="用例文档"></a>用例文档</h2><ol><li>用例编号</li><li>用例名</li><li>用例描述</li><li>参与者</li><li>前置条件</li><li>后置条件</li><li>基本路径<ul><li>1…….XXXX</li><li>2 …….XXXX</li><li>3 …….XXXX</li></ul></li><li>扩展点<ul><li>2a. XXXX</li><li>2a1….XXXXX</li></ul></li><li>补充说明</li></ol><h2 id="详细设计说明书"><a href="#详细设计说明书" class="headerlink" title="详细设计说明书"></a>详细设计说明书</h2><ol><li>引言<ul><li>1.1 编写目的：目的，阅读对象</li><li>1.2 项目背景：项目来源，主管部门</li><li>1.3 定义：术语定义，缩写词原意</li><li>1.4 参考资料：资料版本，作者，来源…</li></ul></li><li>程序描述<ul><li>2.1 功能</li><li>2.2 性能</li><li>2.3 输出和输入项目</li><li>2.4 算法</li><li>2.5 程序逻辑：流程图，NS图，PDL，判定树，判定表…</li><li>2.6 接口</li><li>2.7 存储分配</li><li>2.8 限制条件</li><li>2.9 测试要点</li></ul></li></ol><h2 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h2><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>计划<ul><li>2.1 软件说明</li><li>2.2 测试内容</li><li>2.3 测试1(标识符)</li><li>2.3.1 进度安排</li><li>2.3.2 条件<ul><li>a. 设备</li><li>b. 软件</li><li>c. 人员</li></ul></li><li>2.3.3 测试资料<ul><li>a. 有关本项任务的文件</li><li>b. 被测试程序及其所在的媒体</li><li>c. 测试的输入和输出举例</li><li>d. 有关控制此项测试的方法、过程的图表</li></ul></li><li>2.3.4 测试培训</li><li>2.4 测试2(标识符)</li></ul></li><li>测试设计说明<ul><li>3.1 测试1(标识符)</li><li>3.1 .1 控制</li><li>3.1.2 输入</li><li>3.1.3 输出</li><li>3.2 测试2(标识符)</li></ul></li><li>评价准则<ul><li>4.1 范围</li><li>4.2 数据整理</li><li>4.3 尺寸</li></ul></li></ol><h2 id="测试分析报告："><a href="#测试分析报告：" class="headerlink" title="测试分析报告："></a>测试分析报告：</h2><ol><li>引言<ul><li>1.1 编写目的</li><li>1.2 背景</li><li>1.3 定义</li><li>1.4 参考资料</li></ul></li><li>测试概要</li><li>测试结果及发现<ul><li>3.1 测试1(标识符)</li><li>3.2 测试2(标识符)</li></ul></li><li>对软件功能的结论<ul><li>4.1 功能1(标识符)</li><li>4.1.1 能力</li><li>4.1.2 限制</li><li>4.2 功能2(标识符)</li></ul></li><li>分析摘要<ul><li>5.1 能力</li><li>5.2 缺限和限制</li><li>5.3 建议 a. 各项修改可采用的修改方法程度<ul><li>b. 各项修改的紧迫程度</li><li>c. 各项修改预定的工作量</li><li>d. 各项修改的负责人</li></ul></li><li>5.4 评价</li></ul></li><li>测试资源消耗</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;​ 可行性报告&lt;/p&gt;&lt;ol&gt;&lt;li&gt;引言&lt;ul&gt;&lt;li&gt;1.1 编写目的&lt;/li&gt;&lt;li&gt;1.2 项目背景&lt;/li&gt;&lt;li&gt;1.3 定义&lt;/li&gt;&lt;
      
    
    </summary>
    
      <category term="文档" scheme="https://upyounger.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="软件工程" scheme="https://upyounger.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://upyounger.github.io/2019/05/14/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://upyounger.github.io/2019/05/14/Git常用命令/</id>
    <published>2019-05-14T11:01:20.000Z</published>
    <updated>2019-05-14T11:20:09.854Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --><h1 id="Git常用命令总结"><a href="#Git常用命令总结" class="headerlink" title="Git常用命令总结"></a>Git常用命令总结</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><strong>git init</strong></h2><p>​ 在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h2><p>​ 获取一个url对应的远程Git repo, 创建一个local copy.</p><p>​ 一般的格式是git clone [url].</p><p>​ clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><strong>git status</strong></h2><p>​ 查询repo的状态.</p><p>​ git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><strong>git log</strong></h2><p>​ show commit history of a branch.</p><p>​ git log –oneline –number: 每条log只显示一行,显示number条.</p><p>​ git log –oneline –graph:可以图形化地表示出分支合并历史.</p><p>​ git log branchname可以显示特定分支的log.</p><p>​ git log –oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).</p><p>​ git log –decorate会显示出tag信息.</p><p>​ git log –author=[author name] 可以指定作者的提交历史.</p><p>​ git log –since –before –until –after 根据提交时间筛选log.</p><p>​ –no-merges可以将merge的commits排除在外.</p><p>​ git log –grep 根据commit信息过滤log: git log –grep=keywords</p><p>​ 默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.</p><p>​ git log -S: filter by introduced diff.</p><p>​ 比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).</p><p>​ git log -p: show patch introduced at each commit.</p><p>​ 每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.</p><p>​ 另一种方法是git show [SHA].</p><p>​ git log –stat: show diffstat of changes introduced at each commit.</p><p>​ 同样是用来看改动的相对信息的,–stat比-p的输出更简单一些.</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h2><p>​ 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.</p><p>​ git add .</p><p>​ 会递归地添加当前工作目录中的所有文件.</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><strong>git diff</strong></h2><p>​ 不加参数的git diff:</p><p>​ show diff of unstaged changes.</p><p>​ 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.</p><p>​ 若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:</p><p>​ git diff –cached 命令.</p><p>​ show diff of staged changes.</p><p>​ (Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的).</p><p>​ git diff HEAD</p><p>​ show diff of all staged or unstated changes.</p><p>​ 也即比较woking directory和上次提交之间所有的改动.</p><p>​ 如果想看自从某个版本之后都改动了什么,可以用:</p><p>​ git diff [version tag]</p><p>​ 跟log命令一样,diff也可以加上–stat参数来简化输出.</p><p>​ git diff [branchA] [branchB]可以用来比较两个分支.</p><p>​ 它实际上会返回一个由A到B的patch,不是我们想要的结果.</p><p>​ 一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:</p><p>​ git diff [branchA]…[branchB]给出的.</p><p>​ 实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h2><p>​ 提交已经被add进来的改动.</p><p>​ git commit -m “the commit message”</p><p>​ git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.</p><p>​ git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h2><p>​ undo changes and commits.</p><p>​ 这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.</p><p>​ git reset HEAD: unstage files from index and reset pointer to HEAD</p><p>​ 这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.</p><p>​ git reset –soft</p><p>​ move HEAD to specific commit reference, index and staging are untouched.</p><p>​ git reset –hard</p><p>​ unstage files AND undo any changes in the working directory since last commit.</p><p>​ 使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.</p><p>​ 这里的HEAD可以被写成任何一次提交的SHA-1.</p><p>​ 不带soft和hard参数的git reset,实际上带的是默认参数mixed.</p><p>​ 总结:</p><p>​ git reset –mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.</p><p>​ git reset –soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.</p><p>​ git reset –hard id.是将git的HEAD变了,文件也变了.</p><p>​ 按改动范围排序如下:</p><p>​ soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working)</p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><strong>git revert</strong></h2><p>​ 反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.</p><p>​ git revert HEAD: 撤销最近的一个提交.</p><p>​ git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><strong>git rm</strong></h2><p>​ git rm file: 从staging区移除文件,同时也移除出工作目录.</p><p>​ git rm –cached: 从staging区移除文件,但留在工作目录中.</p><p>​ git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.</p><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a><strong>git clean</strong></h2><p>​ git clean是从工作目录中移除没有track的文件.</p><p>​ 通常的参数是git clean -df:</p><p>​ -d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.</p><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a><strong>git mv</strong></h2><p>​ git rm - - cached orig; mv orig new; git add new</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><strong>git stash</strong></h2><p>​ 把当前的改动压入一个栈.</p><p>​ git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.</p><p>​ git stash list会显示这个栈的list.</p><p>​ git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.</p><p>​ 也可以指定别的项目,比如git stash apply stash@{1}.</p><p>​ 如果你在应用stash中项目的同时想要删除它,可以用git stash pop</p><p>​ 删除stash中的项目:</p><p>​ git stash drop: 删除上一个,也可指定参数删除指定的一个项目.</p><p>​ git stash clear: 删除所有项目.</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><strong>git branch</strong></h2><p>​ git branch可以用来列出分支,创建分支和删除分支.</p><p>​ git branch -v可以看见每一个分支的最后一次提交.</p><p>​ git branch: 列出本地所有分支,当前分支会被星号标示出.</p><p>​ git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).</p><p>​ git branch -d (branchname): 删除一个分支.</p><p>​ 删除remote的分支:</p><p>​ git push (remote-name) :(branch-name): delete a remote branch.</p><p>​ 这个是因为完整的命令形式是:</p><p>​ git push remote-name local-branch:remote-branch</p><p>​ 而这里local-branch的部分为空,就意味着删除了remote-branch</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h2><p>git checkout (branchname)切换到一个分支.</p><p>​ git checkout -b (branchname): 创建并切换到新的分支.</p><p>​ 这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.</p><p>​ checkout还有另一个作用:替换本地改动:</p><p>​ git checkout –<filename></filename></p><p>​ 此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.</p><p>​ 注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><strong>git merge</strong></h2><p>​ 把一个分支merge进当前的分支.</p><p>​ git merge [alias]/[branch]</p><p>​ 把远程分支merge到当前分支.</p><p>​ 如果出现冲突,需要手动修改,可以用git mergetool.</p><p>​ 解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.</p><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a><strong>git tag</strong></h2><p>​ tag a point in history as import.</p><p>​ 会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.</p><p>​ 比如: git tag v1.0</p><p>​ git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.</p><p>​ 当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息</p><p>​ 我们可以利用commit SHA来给一个过去的提交打tag:</p><p>​ git tag -a v0.9 XXXX</p><p>​ push的时候是不包含tag的,如果想包含,可以在push时加上–tags参数.</p><p>​ fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上–tags选项.</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h2><p>​ list, add and delete remote repository aliases.</p><p>​ 因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.</p><p>​ git remote: 列出remote aliases.</p><p>​ 如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.</p><p>​ git remote -v:可以看见每一个别名对应的实际url.</p><p>​ git remote add [alias] [url]: 添加一个新的remote repo.</p><p>​ git remote rm [alias]: 删除一个存在的remote alias.</p><p>​ git remote rename [old-alias] [new-alias]: 重命名.</p><p>​ git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h2><p>​ download new branches and data from a remote repository.</p><p>​ 可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repo</p><p>​ fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们.</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h2><p>​ fetch from a remote repo and try to merge into the current branch.</p><p>​ pull == fetch + merge FETCH_HEAD</p><p>​ git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.</p><p>​ 如果使用–rebase参数,它会执行git rebase来取代原来的git merge.</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><strong>git rebase</strong></h2><p>​ –rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.</p><p>​ rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:</p><p>​ git rebase –continue就会继续打余下的补丁.</p><p>​ git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态.</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h2><p>​ push your new branches and data to a remote repository.</p><p>​ git push [alias] [branch]</p><p>​ 将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.</p><p>​ 如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.</p><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a><strong>git reflog</strong></h2><p>​ git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.</p><p>​ 当git reflog不指定引用的时候,默认列出HEAD的reflog.</p><p>​ HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.</p><p>​ git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号:"></a><strong>特殊符号:</strong></h2><p>​ ^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.</p><p>​ ~<n>相当于连续的<n>个^.</n></n></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Git常用命令总结&quot;&gt;&lt;a href=&quot;#Git常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令总结&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Git Learn" scheme="https://upyounger.github.io/categories/Git-Learn/"/>
    
    
      <category term="Git" scheme="https://upyounger.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>超爽踩点</title>
    <link href="https://upyounger.github.io/2019/05/14/%E8%B6%85%E7%88%BD%E8%B8%A9%E7%82%B9/"/>
    <id>https://upyounger.github.io/2019/05/14/超爽踩点/</id>
    <published>2019-05-14T00:34:15.000Z</published>
    <updated>2019-05-18T03:01:51.179Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --><h1 id="视频Demo："><a href="#视频Demo：" class="headerlink" title="视频Demo："></a>视频Demo：</h1><div style="position:relative;width:100%;height:0;padding-bottom:75%;display:inline-block;margin-left:13%"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=21822311&cid=36012220&page=1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><h1 id="图片Demo："><a href="#图片Demo：" class="headerlink" title="图片Demo："></a>图片Demo：</h1><p><img src="/2019/05/14/超爽踩点/timg.jpg" alt="Test"></p><h6 id="摘要图片大小为-801-309"><a href="#摘要图片大小为-801-309" class="headerlink" title="摘要图片大小为 801*309"></a>摘要图片大小为 801*309</h6><p>模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $(<span class="string">"#xxx"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     $.post(<span class="string">"xxx//路径"</span>,                     &#123;<span class="string">"oid"</span>:$(<span class="string">"#xxx"</span>).val(),<span class="string">"uid"</span>:$(<span class="string">"#xxx"</span>).val()&#125;,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,<span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 23 2019 20:05:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;视频Demo：&quot;&gt;&lt;a href=&quot;#视频Demo：&quot; class=&quot;headerlink&quot; title=&quot;视频Demo：&quot;&gt;&lt;/a&gt;视频D
      
    
    </summary>
    
      <category term="Music" scheme="https://upyounger.github.io/categories/Music/"/>
    
    
      <category term="Music" scheme="https://upyounger.github.io/tags/Music/"/>
    
      <category term="vedio" scheme="https://upyounger.github.io/tags/vedio/"/>
    
  </entry>
  
</feed>
